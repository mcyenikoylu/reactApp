"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PropTypes = require("prop-types");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var kendo_date_math_1 = require("@progress/kendo-date-math");
var kendo_react_intl_1 = require("@progress/kendo-react-intl");
var models_1 = require("../models");
var utils_1 = require("../../utils");
var services_1 = require("../services");
var emptyCell = function (idx) { return (React.createElement("td", { key: idx }, "\u00A0")); };
/**
 * @hidden
 */
var View = /** @class */ (function (_super) {
    __extends(View, _super);
    function View() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.buildWeekNumber = function (row, idx) {
            return (_this.firstDate(row)
                ? (React.createElement("td", { className: "k-alt" }, _this.getWeekNumber(_this.firstDate(row))))
                : emptyCell("week-cell-" + idx));
        };
        _this.buildRow = function (row) {
            return row.map(function (cell, idx) {
                if (!cell) {
                    return emptyCell(idx);
                }
                var aria = {
                    'aria-selected': cell.isSelected
                };
                return (React.createElement("td", __assign({}, aria, { key: cell.id, id: cell.id, title: cell.title, className: _this.getStyles(cell), onClick: function (event) { _this.handleClick(cell, event); }, onMouseEnter: function () { _this.handleMouseEnter(cell); }, onMouseLeave: function () { _this.handleMouseLeave(cell); } }),
                    React.createElement("span", { className: "k-link" }, cell.formattedValue)));
            });
        };
        _this.firstDate = function (row) {
            var cell = _this.firstWeekDateContext(row);
            return cell ? cell.value : null;
        };
        _this.firstWeekDateContext = function (rowCtx) {
            if (!_this.weekNumber) {
                return null;
            }
            var idx = 0;
            var ctx = rowCtx[idx];
            while (!ctx && idx < rowCtx.length) {
                ctx = rowCtx[++idx];
            }
            return ctx;
        };
        _this.handleClick = function (cell, event) {
            var onChange = _this.props.onChange;
            if (onChange) {
                var args = {
                    syntheticEvent: event,
                    nativeEvent: event.nativeEvent,
                    value: kendo_date_math_1.cloneDate(cell.value),
                    target: _this
                };
                onChange.call(undefined, args);
            }
        };
        _this.handleMouseEnter = function (cell) {
            var onCellEnter = _this.props.onCellEnter;
            if (onCellEnter) {
                onCellEnter.call(undefined, cell.value);
            }
        };
        _this.handleMouseLeave = function (cell) {
            var onCellLeave = _this.props.onCellLeave;
            if (onCellLeave) {
                onCellLeave.call(undefined, cell.value);
            }
        };
        return _this;
    }
    Object.defineProperty(View.prototype, "isHorizontal", {
        get: function () {
            return this.props.direction === 'horizontal';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(View.prototype, "isMonthView", {
        get: function () {
            return this.props.activeView === models_1.CalendarViewEnum.month;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(View.prototype, "weekNumber", {
        get: function () {
            return Boolean(this.props.showWeekNumbers && this.props.activeView === models_1.CalendarViewEnum.month);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(View.prototype, "selectedDate", {
        get: function () {
            return this.props.selectedDate !== undefined ? this.props.selectedDate : View.defaultProps.selectedDate;
        },
        enumerable: true,
        configurable: true
    });
    View.prototype.render = function () {
        var _this = this;
        this.intl = kendo_react_intl_1.provideIntlService(this);
        this.weekService = new services_1.WeekNamesService(this.intl);
        var weekNames = this.weekService.getWeekNames(this.weekNumber);
        var colSpan = this.props.service.rowLength(this.weekNumber);
        var title = this.props.service.title(this.props.viewDate);
        var time = utils_1.getToday();
        var viewDate = utils_1.setTime(this.props.viewDate, time);
        var data = this.props.service.data({
            cellUID: this.props.cellUID,
            focusedDate: this.props.focusedDate,
            isActiveView: !this.props.bus.canMoveDown(this.props.activeView),
            selectedDate: this.selectedDate,
            selectionRange: this.props.selectionRange,
            viewDate: viewDate
        });
        return (React.createElement("tbody", { role: "rowgroup" },
            !this.isHorizontal && (React.createElement("tr", { role: "row" },
                React.createElement("th", { scope: "col", colSpan: colSpan }, title))),
            (this.isMonthView && this.isHorizontal) && (React.createElement("tr", { role: "row" }, weekNames.map(function (name, idx) { return (React.createElement("th", { key: idx }, name)); }))),
            data.map(function (row, idx) { return (React.createElement("tr", { role: "row", key: idx },
                _this.weekNumber && _this.buildWeekNumber(row, idx),
                _this.buildRow(row))); })));
    };
    View.prototype.getWeekNumber = function (date) {
        if (!this.weekNumber) {
            return null;
        }
        return kendo_date_math_1.weekInYear(date, this.intl.firstDay());
    };
    View.prototype.getStyles = function (context) {
        var isToday = context.isToday, isWeekend = context.isWeekend, isRangeEnd = context.isRangeEnd, isRangeMid = context.isRangeMid, isSelected = context.isSelected, isRangeStart = context.isRangeStart, isRangeSplitEnd = context.isRangeSplitEnd, isRangeSplitStart = context.isRangeSplitStart;
        var isEndActive = this.props.activeRangeEnd === 'end' && isRangeEnd;
        var isStartActive = this.props.activeRangeEnd === 'start' && isRangeStart;
        return kendo_react_common_1.classNames({
            'k-range-end': isRangeEnd,
            'k-range-mid': isRangeMid,
            'k-range-split-end': isRangeSplitEnd,
            'k-range-split-start': isRangeSplitStart,
            'k-range-start': isRangeStart,
            'k-state-active': isStartActive || isEndActive,
            'k-state-pending-focus': context.isFocused,
            'k-state-selected': isSelected || isRangeStart || isRangeEnd,
            'k-today': isToday,
            'k-weekend': isWeekend,
            'k-state-disabled': context.value.getTime() < this.props.min.getTime()
                || context.value.getTime() > this.props.max.getTime()
        });
    };
    View.propTypes = {
        activeRangeEnd: PropTypes.oneOf(['start', 'end', null]),
        activeView: PropTypes.number.isRequired,
        cellUID: PropTypes.string.isRequired,
        direction: PropTypes.oneOf(['horizontal', 'vertical']),
        focusedDate: PropTypes.instanceOf(Date).isRequired,
        max: PropTypes.instanceOf(Date).isRequired,
        min: PropTypes.instanceOf(Date).isRequired,
        onChange: PropTypes.func,
        selectedDate: PropTypes.oneOfType([PropTypes.instanceOf(Date), PropTypes.arrayOf(PropTypes.instanceOf(Date))]),
        showWeekNumbers: PropTypes.bool,
        viewDate: PropTypes.instanceOf(Date).isRequired
    };
    View.defaultProps = {
        direction: 'vertical',
        selectedDate: utils_1.getToday(),
        showWeekNumbers: false
    };
    return View;
}(React.Component));
exports.View = View;
kendo_react_intl_1.registerForIntl(View);
//# sourceMappingURL=View.js.map