"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PropTypes = require("prop-types");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var util_1 = require("./util");
var SwitchController_1 = require("../common/SwitchController");
var kendo_draggable_1 = require("@telerik/kendo-draggable");
var SWITCH_CONTAINER = 'k-switch-container';
var SWITCH_HANDLE = 'k-switch-handle';
var SWITCH_LABEL_ON = 'k-switch-label-on';
var SWITCH_LABEL_OFF = 'k-switch-label-off';
/**
 * Represents the [KendoReact Switch component]({% slug overview_switch%}).
 */
var Switch = /** @class */ (function (_super) {
    __extends(Switch, _super);
    /**
     * @hidden
     */
    function Switch(props) {
        var _this = _super.call(this, props) || this;
        _this._id = kendo_react_common_1.guid();
        _this.handleKeyDown = function (event) {
            _this.ifEnabled(function () {
                var keyCode = event.keyCode;
                if (keyCode === kendo_react_common_1.Keys.space || keyCode === kendo_react_common_1.Keys.enter) {
                    _this._controller.change(!_this.state.checked, event);
                }
            });
        };
        _this.handleWrapperFocus = function (event) {
            _this.setState({ focused: true });
            _this.ifEnabled(_this.props.onFocus, event);
        };
        _this.handleWrapperBlur = function (event) {
            _this.setState({ focused: false });
            _this.ifEnabled(_this.props.onBlur, event);
        };
        _this.handleResize = function (_) {
            _this.updateControllerState();
        };
        _this.handleDrag = function (event) {
            _this.ifEnabled(_this._controller.onDrag, event);
        };
        _this.handlePress = function (event) {
            _this.ifEnabled(_this._controller.onPress, event);
        };
        _this.handleRelease = function (event) {
            _this.ifEnabled(_this._controller.onRelease, event);
        };
        _this.handleChangeValue = function (value, event) {
            var checked = _this.props.checked !== undefined ? _this.props.checked : value;
            // The actual value is in the state.
            if (_this.state.checked !== checked) {
                _this.setState({ checked: checked }, function () {
                    _this.valueDuringOnChange = undefined;
                });
            }
            // The value that is coming form the controller.
            // The controller should not be aware if we are in
            // a controlled or uncontrolled state, so we update it.
            if (_this._controller.checked !== checked) {
                _this._controller.change(checked);
            }
            // If the user is not aware of the next suggested value,
            // we present it in the onChange event.
            // The onChange event is called every time when the component is
            // in an uncontrolled state.
            if (_this.props.checked !== value) {
                _this.valueDuringOnChange = value;
                kendo_react_common_1.dispatchEvent(_this.props.onChange, event, _this, { value: value });
            }
        };
        _this.ifEnabled = function (callback, event) {
            if (!_this.props.disabled) {
                callback(event);
            }
        };
        _this.updateView = function (elements) {
            if (_this._drag) {
                _this.applyStyle(_this._controller.addAnimation(elements.handle), _this._drag);
            }
        };
        _this.applyStyle = function (props, drag) {
            Object.keys(props).forEach(function (x) {
                drag.style[x] = props[x];
            });
        };
        _this.state = {
            checked: props.checked !== undefined ? props.checked : props.defaultChecked,
            focused: false
        };
        _this._controller = new SwitchController_1.default(_this.updateView, _this.handleChangeValue);
        _this.handleResize = util_1.throttle(_this.handleResize, util_1.FRAME_DURATION);
        return _this;
    }
    Object.defineProperty(Switch.prototype, "value", {
        /**
         * Gets the value of the Switch.
         */
        get: function () {
            return this.valueDuringOnChange !== undefined
                ? this.valueDuringOnChange
                : this.state.checked;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Switch.prototype, "element", {
        get: function () {
            return this._element;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @hidden
     */
    Switch.prototype.componentDidUpdate = function () {
        if (this.props.checked !== undefined && this.props.checked !== this.state.checked) {
            this._controller.change(this.props.checked);
        }
    };
    /**
     * @hidden
     */
    Switch.prototype.componentDidMount = function () {
        if (!this._element) {
            return;
        }
        this._draggable = new kendo_draggable_1.default({
            drag: this.handleDrag,
            press: this.handlePress,
            release: this.handleRelease
        });
        this._draggable.bindTo(this._element);
        this.updateControllerState();
        window.addEventListener('resize', this.handleResize);
        this.forceUpdate();
    };
    /**
     * @hidden
     */
    Switch.prototype.componentWillUnmount = function () {
        if (this._draggable && this._draggable.destroy) {
            this._draggable.destroy();
        }
        window.removeEventListener('resize', this.handleResize);
    };
    /**
     * @hidden
     */
    Switch.prototype.render = function () {
        var _this = this;
        var _a = this.state, focused = _a.focused, checked = _a.checked;
        var _b = this.props, dir = _b.dir, disabled = _b.disabled, id = _b.id, offLabel = _b.offLabel, onLabel = _b.onLabel, tabIndex = _b.tabIndex;
        var direction = dir || (this._wrapper && getComputedStyle(this._wrapper).direction) || undefined;
        var switchClassName = kendo_react_common_1.classNames({
            'k-widget': true,
            'k-switch': true,
            'k-switch-on': checked,
            'k-switch-off': !checked,
            'k-state-focused': focused,
            'k-state-disabled': disabled
        }, this.props.className);
        var ariaAttributes = {
            'aria-checked': checked,
            'aria-disabled': disabled || undefined
        };
        return (React.createElement("span", __assign({ className: switchClassName, dir: direction, onKeyDown: this.handleKeyDown, ref: function (span) { _this._wrapper = span; } }, ariaAttributes),
            React.createElement("span", { className: SWITCH_CONTAINER, id: id || this._id, onBlur: this.handleWrapperBlur, onFocus: this.handleWrapperFocus, ref: function (span) { _this._element = span; }, tabIndex: disabled ? undefined : tabIndex },
                React.createElement("span", { className: SWITCH_HANDLE, ref: function (span) { _this._drag = span; } },
                    React.createElement("span", { className: SWITCH_LABEL_ON }, onLabel),
                    React.createElement("span", { className: SWITCH_LABEL_OFF }, offLabel)))));
    };
    Switch.prototype.updateControllerState = function () {
        if (!this._element || !this._wrapper || !this._drag || !window) {
            return;
        }
        var handleElement = this._drag;
        var handleStyles = window.getComputedStyle(handleElement);
        var handleMargin = (parseInt(handleStyles.marginLeft || '0', 10)
            + parseInt(handleStyles.borderLeftWidth || '0', 10)) * 2;
        var handleOffset = handleElement.offsetWidth;
        var wrapper = this._wrapper;
        var rtl = wrapper && (getComputedStyle(wrapper).direction === 'rtl') || false;
        var rect = wrapper.getBoundingClientRect();
        var wrapperOffset = wrapper.offsetWidth;
        if (wrapperOffset === 0) {
            return;
        }
        this._controller.updateState({
            animate: false,
            checked: this.state.checked,
            coords: {
                left: rect.left,
                right: rect.right
            },
            handleMargin: handleMargin,
            handleOffset: handleOffset,
            reverse: rtl,
            wrapperOffset: wrapperOffset
        });
    };
    /**
     * @hidden
     */
    Switch.propTypes = {
        checked: PropTypes.bool,
        className: PropTypes.string,
        disabled: PropTypes.bool,
        defaultChecked: PropTypes.bool,
        dir: PropTypes.string,
        id: PropTypes.string,
        offLabel: PropTypes.string,
        onBlur: PropTypes.any,
        onChange: PropTypes.any,
        onFocus: PropTypes.any,
        onLabel: PropTypes.string,
        tabIndex: PropTypes.number
    };
    /**
     * @hidden
     */
    Switch.defaultProps = {
        disabled: false,
        defaultChecked: false,
        offLabel: 'OFF',
        onBlur: kendo_react_common_1.noop,
        onFocus: kendo_react_common_1.noop,
        onLabel: 'ON',
        tabIndex: 0
    };
    return Switch;
}(React.Component));
exports.default = Switch;
//# sourceMappingURL=Switch.js.map