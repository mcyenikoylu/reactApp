{"version":3,"file":"dx-grid-core.umd.js","sources":["../src/plugins/grid-core/computeds.js","../src/plugins/sorting-state/reducers.js","../src/plugins/sorting-state/helpers.js","../src/utils/merge-sort.js","../src/utils/hierarchical-data.js","../src/plugins/integrated-sorting/computeds.js","../src/plugins/filtering-state/reducers.js","../src/plugins/filtering-state/helpers.js","../src/plugins/filtering-state/computeds.js","../src/plugins/integrated-filtering/computeds.js","../src/plugins/grouping-state/constants.js","../src/plugins/grouping-state/reducers.js","../src/plugins/grouping-state/helpers.js","../src/plugins/integrated-grouping/constants.js","../src/plugins/integrated-grouping/computeds.js","../src/plugins/custom-grouping/computeds.js","../src/plugins/grouping-panel/helpers.js","../src/plugins/paging-state/reducers.js","../src/plugins/integrated-paging/helpers.js","../src/plugins/integrated-paging/computeds.js","../src/plugins/paging-panel/helpers.js","../src/utils/common-reducers.js","../src/plugins/selection-state/reducers.js","../src/plugins/integrated-selection/computeds.js","../src/plugins/editing-state/reducers.js","../src/plugins/editing-state/computeds.js","../src/plugins/editing-state/helpers.js","../src/plugins/table-column-reordering/constants.js","../src/plugins/table-column-reordering/reducers.js","../src/plugins/table/constants.js","../src/plugins/table-column-reordering/computeds.js","../src/plugins/table-column-resizing/computeds.js","../src/plugins/table-column-resizing/reducers.js","../src/plugins/table-edit-column/constants.js","../src/plugins/table-edit-row/constants.js","../src/plugins/table-header-row/constants.js","../src/plugins/table-edit-column/helpers.js","../src/plugins/table-edit-column/computeds.js","../src/plugins/table-edit-row/helpers.js","../src/plugins/table-edit-row/computeds.js","../src/plugins/table-filter-row/constants.js","../src/plugins/table-filter-row/helpers.js","../src/plugins/table-filter-row/computeds.js","../src/plugins/table-group-row/constants.js","../src/plugins/table-group-row/helpers.js","../src/plugins/table-group-row/computeds.js","../src/plugins/table-header-row/helpers.js","../src/plugins/table-header-row/computeds.js","../src/plugins/table-band-header/constants.js","../src/plugins/table-band-header/helpers.js","../src/plugins/table-band-header/computeds.js","../src/plugins/row-detail-state/reducers.js","../src/plugins/table-row-detail/constants.js","../src/plugins/table-row-detail/helpers.js","../src/plugins/table-row-detail/computeds.js","../src/plugins/table-selection/constants.js","../src/plugins/table-selection/helpers.js","../src/plugins/table-selection/computeds.js","../src/plugins/table/helpers.js","../src/utils/column-extension.js","../src/plugins/table/computeds.js","../src/plugins/table-column-visibility/computeds.js","../src/plugins/table-column-visibility/helpers.js","../src/plugins/column-chooser/computeds.js","../src/plugins/column-chooser/reducers.js","../src/plugins/tree-data-state/reducers.js","../src/plugins/custom-tree-data/constants.js","../src/plugins/custom-tree-data/computeds.js","../src/plugins/table-tree-column/helpers.js","../src/plugins/search-state/reducers.js","../src/plugins/search-state/computeds.js","../src/plugins/data-type-provider/computeds.js","../src/plugins/table-fixed-columns/constants.js","../src/plugins/table-fixed-columns/helpers.js","../src/plugins/table-fixed-columns/computeds.js","../src/plugins/integrated-summary/computeds.js","../src/plugins/table-summary-row/constants.js","../src/plugins/table-summary-row/computeds.js","../src/plugins/table-summary-row/helpers.js","../src/utils/column-geometries.js","../src/utils/table.js","../src/utils/group-panel.js","../src/utils/virtual-table.js"],"sourcesContent":["export const rowIdGetter = (getRowId, rows) => {\n  if (!getRowId) {\n    const map = new Map(rows.map((row, rowIndex) => [row, rowIndex]));\n    return row => map.get(row);\n  }\n  return getRowId;\n};\n\nconst defaultGetCellValue = (row, columnName) => row[columnName];\nexport const cellValueGetter = (getCellValue = defaultGetCellValue, columns) => {\n  let useFastAccessor = true;\n  const map = columns.reduce((acc, column) => {\n    if (column.getCellValue) {\n      useFastAccessor = false;\n      acc[column.name] = column.getCellValue;\n    }\n    return acc;\n  }, {});\n\n  if (useFastAccessor) {\n    return getCellValue;\n  }\n\n  return (row, columnName) => (map[columnName]\n    ? map[columnName](row, columnName)\n    : getCellValue(row, columnName));\n};\n","export const changeColumnSorting = (state, {\n  columnName, direction, keepOther, sortIndex,\n}) => {\n  const { sorting } = state;\n\n  let nextSorting = [];\n  if (keepOther === true) {\n    nextSorting = sorting.slice();\n  }\n  if (Array.isArray(keepOther)) {\n    nextSorting = sorting.slice()\n      .filter(columnSorting => keepOther.indexOf(columnSorting.columnName) > -1);\n  }\n\n  const columnSortingIndex = sorting\n    .findIndex(columnSorting => columnSorting.columnName === columnName);\n  const columnSorting = sorting[columnSortingIndex];\n  const newColumnSorting = {\n    columnName,\n    direction: direction\n      || (!columnSorting || columnSorting.direction === 'desc' ? 'asc' : 'desc'),\n  };\n\n  if (columnSortingIndex > -1) {\n    nextSorting.splice(columnSortingIndex, 1);\n  }\n\n  if (direction !== null) {\n    const newIndexFallback = columnSortingIndex > -1 ? columnSortingIndex : nextSorting.length;\n    const newIndex = sortIndex !== undefined ? sortIndex : newIndexFallback;\n    nextSorting.splice(newIndex, 0, newColumnSorting);\n  }\n\n  return {\n    sorting: nextSorting,\n  };\n};\n","const unique = arr => [...new Set(arr)];\n\nexport const getColumnSortingDirection = (sorting, columnName) => {\n  const columnSorting = sorting.filter(s => s.columnName === columnName)[0];\n  return columnSorting ? columnSorting.direction : null;\n};\n\nexport const getPersistentSortedColumns = (\n  sorting, columnExtensions = [],\n) => columnExtensions.reduce((acc, { columnName, sortingEnabled }) => {\n  if (sortingEnabled === false) {\n    if (sorting.findIndex(sortItem => sortItem.columnName === columnName) > -1) {\n      acc.push(columnName);\n    }\n  }\n  return acc;\n}, []);\n\nexport const calculateKeepOther = (sorting, keepOther, persistentSortedColumns = []) => {\n  if (!persistentSortedColumns.length) return keepOther;\n  if (!keepOther) return persistentSortedColumns;\n\n  return Array.isArray(keepOther)\n    ? unique([...keepOther, ...persistentSortedColumns])\n    : unique([...sorting.map(item => item.columnName), ...persistentSortedColumns]);\n};\n","/* eslint-disable no-plusplus, no-param-reassign, no-use-before-define, no-constant-condition */\n\nconst merge = (array, auxiliary, lo, mid, hi, compare) => {\n  let i = lo;\n  let j = mid + 1;\n  let k = lo;\n  while (true) {\n    const cmp = compare(array[i], array[j]);\n    if (cmp <= 0) {\n      auxiliary[k++] = array[i++];\n      if (i > mid) {\n        do {\n          auxiliary[k++] = array[j++];\n        } while (j <= hi);\n        break;\n      }\n    } else {\n      auxiliary[k++] = array[j++];\n      if (j > hi) {\n        do {\n          auxiliary[k++] = array[i++];\n        } while (i <= mid);\n        break;\n      }\n    }\n  }\n};\n\nconst sortArrayToAuxiliary = (array, auxiliary, lo, hi, compare) => {\n  if (hi < lo) return;\n  if (hi === lo) {\n    auxiliary[lo] = array[lo];\n    return;\n  }\n  const mid = Math.floor(lo + ((hi - lo) / 2));\n  sortAuxiliaryToArray(array, auxiliary, lo, mid, compare);\n  sortAuxiliaryToArray(array, auxiliary, mid + 1, hi, compare);\n  merge(array, auxiliary, lo, mid, hi, compare);\n};\n\nconst sortAuxiliaryToArray = (array, auxiliary, lo, hi, compare) => {\n  if (hi <= lo) return;\n  const mid = Math.floor(lo + ((hi - lo) / 2));\n  sortArrayToAuxiliary(array, auxiliary, lo, mid, compare);\n  sortArrayToAuxiliary(array, auxiliary, mid + 1, hi, compare);\n  merge(auxiliary, array, lo, mid, hi, compare);\n};\n\nexport default (\n  array,\n  compare = (a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  },\n) => {\n  const result = array.slice();\n  const auxiliary = array.slice();\n  sortAuxiliaryToArray(result, auxiliary, 0, result.length - 1, compare);\n  return result;\n};\n","export const NODE_CHECK = Symbol('node');\n\nexport const rowsToTree = (rows, getRowLevelKey) => {\n  if (!rows.length) return rows;\n\n  const levels = [{ children: [] }];\n\n  rows.forEach((row) => {\n    const levelKey = getRowLevelKey(row);\n    if (levelKey) {\n      const levelIndex = levels.slice(1)\n        .findIndex(level => getRowLevelKey(level.root) === levelKey) + 1;\n      if (levelIndex > 0) {\n        levels.splice(levelIndex, levels.length - levelIndex);\n      }\n      const node = { [NODE_CHECK]: true, root: row, children: [] };\n      levels[levels.length - 1].children.push(node);\n      levels.push(node);\n    } else {\n      levels[levels.length - 1].children.push(row);\n    }\n  });\n\n  return levels[0].children;\n};\n\nexport const treeToRows = (tree, rows = []) => {\n  if (!tree.length) return tree;\n  return tree.reduce(\n    (acc, node) => {\n      if (node[NODE_CHECK]) {\n        acc.push(node.root);\n        treeToRows(node.children, rows);\n      } else {\n        acc.push(node);\n      }\n      return acc;\n    },\n    rows,\n  );\n};\n","import mergeSort from '../../utils/merge-sort';\nimport { NODE_CHECK, rowsToTree, treeToRows } from '../../utils/hierarchical-data';\n\nconst defaultCompare = (a, b) => {\n  if (a === b) return 0;\n\n  if (a === null) {\n    return b === undefined ? -1 : 1;\n  }\n  if (a === undefined) {\n    return 1;\n  }\n  if (b === null || b === undefined) {\n    return -1;\n  }\n  return a < b ? -1 : 1;\n};\n\nconst createCompare = (sorting, getColumnCompare, getComparableValue) => sorting.slice()\n  .reverse()\n  .reduce(\n    (prevCompare, columnSorting) => {\n      const { columnName } = columnSorting;\n      const inverse = columnSorting.direction === 'desc';\n      const columnCompare = (getColumnCompare && getColumnCompare(columnName)) || defaultCompare;\n\n      return (aRow, bRow) => {\n        const a = getComparableValue(aRow, columnName);\n        const b = getComparableValue(bRow, columnName);\n        const result = columnCompare(a, b);\n\n        if (result !== 0) {\n          return inverse ? -result : result;\n        }\n        return prevCompare(aRow, bRow);\n      };\n    },\n    () => 0,\n  );\n\nconst sortTree = (tree, compare) => {\n  const sortedTree = tree.map((node) => {\n    if (node[NODE_CHECK]) {\n      return {\n        ...node,\n        children: sortTree(node.children, compare),\n      };\n    }\n    return node;\n  });\n\n  return mergeSort(\n    sortedTree, (a, b) => compare(a[NODE_CHECK] ? a.root : a, b[NODE_CHECK] ? b.root : b),\n  );\n};\n\nconst sortHierarchicalRows = (rows, compare, getRowLevelKey) => {\n  const tree = rowsToTree(rows, getRowLevelKey);\n\n  const sortedTree = sortTree(tree, compare);\n\n  return treeToRows(sortedTree);\n};\n\nexport const sortedRows = (\n  rows,\n  sorting,\n  getCellValue,\n  getColumnCompare,\n  isGroupRow,\n  getRowLevelKey,\n) => {\n  if (!sorting.length || !rows.length) return rows;\n\n  if (!getRowLevelKey) {\n    const compare = createCompare(sorting, getColumnCompare, getCellValue);\n    return mergeSort(rows.slice(), compare);\n  }\n\n  const compare = createCompare(sorting, getColumnCompare, (row, columnName) => {\n    if (isGroupRow && isGroupRow(row)) {\n      if (row.groupedBy === columnName) {\n        return row.value;\n      }\n      return undefined;\n    }\n    return getCellValue(row, columnName);\n  });\n  return sortHierarchicalRows(\n    rows,\n    compare,\n    getRowLevelKey,\n  );\n};\n","export const changeColumnFilter = (filters, { columnName, config }) => {\n  const filterIndex = filters.findIndex(f => f.columnName === columnName);\n  const nextState = filters.slice();\n\n  if (config) {\n    const filter = { columnName, ...config };\n    if (filterIndex > -1) {\n      nextState.splice(filterIndex, 1, filter);\n    } else {\n      nextState.push(filter);\n    }\n  } else if (filterIndex > -1) {\n    nextState.splice(filterIndex, 1);\n  }\n\n  return nextState;\n};\n","export const getColumnFilterConfig = (filters, columnName) => {\n  if (!filters.length) { return null; }\n\n  const filter = filters.filter(s => s.columnName === columnName)[0];\n  if (!filter) return null;\n\n  return filter;\n};\n","export const filterExpression = (filters, expression) => {\n  const selfFilterExpr = { operator: 'and', filters };\n  if (!expression) {\n    return selfFilterExpr;\n  }\n  return {\n    operator: 'and',\n    filters: [expression, selfFilterExpr],\n  };\n};\n","import { NODE_CHECK, rowsToTree, treeToRows } from '../../utils/hierarchical-data';\n\nconst operators = {\n  or: predicates => row => predicates.reduce((acc, predicate) => acc || predicate(row), false),\n  and: predicates => row => predicates.reduce((acc, predicate) => acc && predicate(row), true),\n};\n\nconst toLowerCase = value => String(value).toLowerCase();\n\nconst operationPredicates = {\n  contains: (value, filter) => toLowerCase(value).indexOf(toLowerCase(filter.value)) > -1,\n  notContains: (value, filter) => toLowerCase(value).indexOf(toLowerCase(filter.value)) === -1,\n  startsWith: (value, filter) => toLowerCase(value).startsWith(toLowerCase(filter.value)),\n  endsWith: (value, filter) => toLowerCase(value).endsWith(toLowerCase(filter.value)),\n  equal: (value, filter) => value === filter.value,\n  notEqual: (value, filter) => value !== filter.value,\n  greaterThan: (value, filter) => value > filter.value,\n  greaterThanOrEqual: (value, filter) => value >= filter.value,\n  lessThan: (value, filter) => value < filter.value,\n  lessThanOrEqual: (value, filter) => value <= filter.value,\n};\n\nexport const defaultFilterPredicate = (value, filter) => {\n  const operation = filter.operation || 'contains';\n  return operationPredicates[operation](value, filter);\n};\n\nconst filterTree = (tree, predicate) => tree.reduce(\n  (acc, node) => {\n    if (node[NODE_CHECK]) {\n      const filteredChildren = filterTree(node.children, predicate);\n      if (filteredChildren.length > 0) {\n        acc.push({\n          ...node,\n          children: filteredChildren,\n        });\n        return acc;\n      }\n      if (predicate(node.root, true)) {\n        acc.push(node.root);\n        return acc;\n      }\n      return acc;\n    }\n\n    if (predicate(node)) {\n      acc.push(node);\n      return acc;\n    }\n\n    return acc;\n  },\n  [],\n);\n\nconst filterHierarchicalRows = (rows, predicate, getRowLevelKey, getCollapsedRows) => {\n  const tree = rowsToTree(rows, getRowLevelKey);\n  const collapsedRowsMeta = [];\n\n  const filteredTree = filterTree(tree, (row, isNode) => {\n    if (isNode) {\n      const collapsedRows = getCollapsedRows && getCollapsedRows(row);\n      if (collapsedRows && collapsedRows.length) {\n        const filteredCollapsedRows = collapsedRows.filter(predicate);\n        collapsedRowsMeta.push([row, filteredCollapsedRows]);\n        return !!filteredCollapsedRows.length || predicate(row);\n      }\n      if (predicate(row)) {\n        collapsedRowsMeta.push([row, []]);\n        return true;\n      }\n      return false;\n    }\n    return predicate(row);\n  });\n\n  return { rows: treeToRows(filteredTree), collapsedRowsMeta: new Map(collapsedRowsMeta) };\n};\n\nconst buildPredicate = (\n  initialFilterExpression,\n  getCellValue,\n  getColumnPredicate,\n) => {\n  const getSimplePredicate = (filterExpression) => {\n    const { columnName } = filterExpression;\n    const customPredicate = getColumnPredicate && getColumnPredicate(columnName);\n    const predicate = customPredicate || defaultFilterPredicate;\n    return row => predicate(getCellValue(row, columnName), filterExpression, row);\n  };\n\n  const getOperatorPredicate = (filterExpression) => {\n    const build = operators[toLowerCase(filterExpression.operator)];\n    // eslint-disable-next-line no-use-before-define\n    return build && build(filterExpression.filters.map(getPredicate));\n  };\n\n  const getPredicate = filterExpression => getOperatorPredicate(filterExpression)\n    || getSimplePredicate(filterExpression);\n\n  return getPredicate(initialFilterExpression);\n};\n\nexport const filteredRows = (\n  rows,\n  filterExpression,\n  getCellValue,\n  getColumnPredicate,\n  getRowLevelKey,\n  getCollapsedRows,\n) => {\n  if (!(filterExpression && Object.keys(filterExpression).length && rows.length)) {\n    return { rows };\n  }\n\n  const predicate = buildPredicate(\n    filterExpression,\n    getCellValue,\n    getColumnPredicate,\n  );\n\n  return getRowLevelKey\n    ? filterHierarchicalRows(rows, predicate, getRowLevelKey, getCollapsedRows)\n    : { rows: rows.filter(predicate) };\n};\n\nexport const filteredCollapsedRowsGetter = (\n  { collapsedRowsMeta },\n) => row => collapsedRowsMeta && collapsedRowsMeta.get(row);\n\nexport const unwrappedFilteredRows = ({ rows }) => rows;\n","export const GROUP_KEY_SEPARATOR = '|';\n","import { GROUP_KEY_SEPARATOR } from './constants';\n\nconst applyColumnGrouping = (grouping, { columnName, groupIndex }) => {\n  const nextGrouping = grouping.slice();\n  const groupingIndex = nextGrouping.findIndex(g => g.columnName === columnName);\n  let targetIndex = groupIndex;\n\n  if (groupingIndex > -1) {\n    nextGrouping.splice(groupingIndex, 1);\n  } else if (groupIndex === undefined) {\n    targetIndex = nextGrouping.length;\n  }\n\n  if (targetIndex > -1) {\n    nextGrouping.splice(targetIndex, 0, {\n      columnName,\n    });\n  }\n\n  return nextGrouping;\n};\n\nexport const changeColumnGrouping = ({ grouping, expandedGroups }, { columnName, groupIndex }) => {\n  const nextGrouping = applyColumnGrouping(grouping, { columnName, groupIndex });\n\n  const ungroupedColumnIndex = grouping.findIndex(\n    (group, index) => !nextGrouping[index] || group.columnName !== nextGrouping[index].columnName,\n  );\n  if (ungroupedColumnIndex === -1) {\n    return {\n      grouping: nextGrouping,\n    };\n  }\n\n  const filteredExpandedGroups = expandedGroups.filter(\n    group => group.split(GROUP_KEY_SEPARATOR).length <= ungroupedColumnIndex,\n  );\n  if (filteredExpandedGroups.length === expandedGroups.length) {\n    return {\n      grouping: nextGrouping,\n    };\n  }\n\n  return {\n    grouping: nextGrouping,\n    expandedGroups: filteredExpandedGroups,\n  };\n};\n\nexport const toggleExpandedGroups = (state, { groupKey }) => {\n  const expandedGroups = state.expandedGroups.slice();\n  const groupKeyIndex = expandedGroups.indexOf(groupKey);\n\n  if (groupKeyIndex > -1) {\n    expandedGroups.splice(groupKeyIndex, 1);\n  } else {\n    expandedGroups.push(groupKey);\n  }\n\n  return {\n    expandedGroups,\n  };\n};\n\nexport const draftColumnGrouping = ({ grouping, draftGrouping }, { columnName, groupIndex }) => ({\n  draftGrouping: applyColumnGrouping(draftGrouping || grouping, { columnName, groupIndex }),\n});\n\nexport const cancelColumnGroupingDraft = () => ({\n  draftGrouping: null,\n});\n","export const adjustSortIndex = (groupingIndex, grouping, sorting) => Math.max(\n  grouping.slice(0, groupingIndex).reduce(\n    (acc, columnGrouping) => {\n      const columnSortingIndex = sorting.findIndex(\n        columnSorting => columnSorting.columnName === columnGrouping.columnName,\n      );\n      return (columnSortingIndex === -1 ? acc - 1 : acc);\n    },\n    groupingIndex,\n  ),\n  0,\n);\n","export const GRID_GROUP_TYPE = Symbol('group');\nexport const GRID_GROUP_CHECK = Symbol(`${GRID_GROUP_TYPE.toString()}_check`);\nexport const GRID_GROUP_LEVEL_KEY = Symbol(`${GRID_GROUP_TYPE.toString()}_levelKey`);\nexport const GRID_GROUP_COLLAPSED_ROWS = Symbol(`${GRID_GROUP_TYPE.toString()}_collapsedRows`);\n","import { GROUP_KEY_SEPARATOR } from '../grouping-state/constants';\nimport {\n  GRID_GROUP_TYPE,\n  GRID_GROUP_CHECK,\n  GRID_GROUP_LEVEL_KEY,\n  GRID_GROUP_COLLAPSED_ROWS,\n} from './constants';\n\nexport const groupRowChecker = row => row[GRID_GROUP_CHECK];\n\nexport const groupRowLevelKeyGetter = row => (row ? row[GRID_GROUP_LEVEL_KEY] : undefined);\n\nconst defaultColumnCriteria = value => ({\n  key: String(value),\n  value,\n});\n\nexport const groupedRows = (\n  rows,\n  grouping,\n  getCellValue,\n  getColumnCriteria,\n  keyPrefix = '',\n) => {\n  if (!grouping.length) return rows;\n\n  const { columnName } = grouping[0];\n  const groupCriteria = (getColumnCriteria && getColumnCriteria(columnName))\n    || defaultColumnCriteria;\n  const groups = rows\n    .reduce((acc, row) => {\n      const { key, value = key } = groupCriteria(getCellValue(row, columnName), row);\n      const sameKeyItems = acc.get(key);\n\n      if (!sameKeyItems) {\n        acc.set(key, [value, key, [row]]);\n      } else {\n        sameKeyItems[2].push(row);\n      }\n      return acc;\n    }, new Map());\n\n  const groupedBy = grouping[0].columnName;\n  const nestedGrouping = grouping.slice(1);\n  return [...groups.values()]\n    .reduce((acc, [value, key, items]) => {\n      const compoundKey = `${keyPrefix}${key}`;\n      acc.push({\n        [GRID_GROUP_CHECK]: true,\n        [GRID_GROUP_LEVEL_KEY]: `${GRID_GROUP_TYPE.toString()}_${groupedBy}`,\n        groupedBy,\n        compoundKey,\n        key,\n        value,\n      });\n      acc.push(...groupedRows(\n        items,\n        nestedGrouping,\n        getCellValue,\n        getColumnCriteria,\n        `${compoundKey}${GROUP_KEY_SEPARATOR}`,\n      ));\n      return acc;\n    }, []);\n};\n\nexport const expandedGroupRows = (rows, grouping, expandedGroups) => {\n  if (!grouping.length) return rows;\n\n  const groupingColumnNames = grouping.map(columnGrouping => columnGrouping.columnName);\n  const expandedGroupsSet = new Set(expandedGroups);\n  let currentGroupExpanded = true;\n  let currentGroupLevel = 0;\n\n  return rows.reduce((acc, row) => {\n    if (!row[GRID_GROUP_CHECK]) {\n      if (currentGroupExpanded) {\n        acc.push(row);\n      } else {\n        acc[acc.length - 1][GRID_GROUP_COLLAPSED_ROWS].push(row);\n      }\n      return acc;\n    }\n\n    const groupLevel = groupingColumnNames.indexOf(row.groupedBy);\n    if (groupLevel > currentGroupLevel && !currentGroupExpanded) {\n      return acc;\n    }\n\n    currentGroupExpanded = expandedGroupsSet.has(row.compoundKey);\n    currentGroupLevel = groupLevel;\n\n    if (currentGroupExpanded) {\n      acc.push(row);\n    } else {\n      acc.push({\n        ...row,\n        [GRID_GROUP_COLLAPSED_ROWS]: [],\n      });\n    }\n\n    return acc;\n  }, []);\n};\n\nexport const groupCollapsedRowsGetter = getCollapsedRows => row => row[GRID_GROUP_COLLAPSED_ROWS]\n|| (getCollapsedRows && getCollapsedRows(row));\n","import { GROUP_KEY_SEPARATOR } from '../grouping-state/constants';\nimport {\n  GRID_GROUP_TYPE,\n  GRID_GROUP_CHECK,\n  GRID_GROUP_LEVEL_KEY,\n} from '../integrated-grouping/constants';\n\nexport const customGroupedRows = (\n  currentRows,\n  grouping,\n  getChildGroups,\n  rootRows = currentRows,\n  keyPrefix = '',\n) => {\n  if (!currentRows || !currentRows.length) return [];\n  if (!grouping.length) return currentRows;\n\n  const groupedBy = grouping[0].columnName;\n  const nestedGrouping = grouping.slice(1);\n  return getChildGroups(currentRows, grouping[0], rootRows)\n    .reduce((acc, { key, value = key, childRows }) => {\n      const compoundKey = `${keyPrefix}${key}`;\n      acc.push({\n        [GRID_GROUP_CHECK]: true,\n        [GRID_GROUP_LEVEL_KEY]: `${GRID_GROUP_TYPE.toString()}_${groupedBy}`,\n        groupedBy,\n        compoundKey,\n        key,\n        value,\n      });\n      acc.push(...customGroupedRows(\n        childRows,\n        nestedGrouping,\n        getChildGroups,\n        rootRows,\n        `${compoundKey}${GROUP_KEY_SEPARATOR}`,\n      ));\n      return acc;\n    }, []);\n};\n\nexport const customGroupingRowIdGetter = (getRowId, rows) => {\n  const firstRow = rows.find(row => !row[GRID_GROUP_CHECK]);\n  if (!firstRow || getRowId(firstRow) !== undefined) {\n    return getRowId;\n  }\n  const map = new Map(rows\n    .filter(row => !row[GRID_GROUP_CHECK])\n    .map((row, rowIndex) => [row, rowIndex]));\n\n  return row => map.get(row);\n};\n","export const groupingPanelItems = (columns, grouping, draftGrouping) => {\n  const items = draftGrouping.map(({ columnName }) => ({\n    column: columns.find(c => c.name === columnName),\n    draft: !grouping.some(columnGrouping => columnGrouping.columnName === columnName),\n  }));\n\n  grouping.forEach(({ columnName }, index) => {\n    if (draftGrouping.some(columnGrouping => columnGrouping.columnName === columnName)) return;\n    items.splice(index, 0, {\n      column: columns.find(c => c.name === columnName),\n      draft: true,\n    });\n  });\n\n  return items;\n};\n","export const setCurrentPage = (prevPage, page) => page;\nexport const setPageSize = (prevPageSize, size) => size;\n","export const clamp = (value, max) => Math.max(Math.min(value, max), 0);\n","import { clamp } from './helpers';\n\nconst PAGE_HEADERS_OVERFLOW_ERROR = 'Max row level exceeds the page size. Consider increasing the page size.';\n\nexport const paginatedRows = (rows, pageSize, page) => (\n  pageSize\n    ? rows.slice(pageSize * page, pageSize * (page + 1))\n    : rows\n);\n\nexport const rowsWithPageHeaders = (rows, pageSize, getRowLevelKey) => {\n  if (!pageSize || !getRowLevelKey) return rows;\n\n  let result = rows.slice();\n\n  let headerRows = [];\n  let currentIndex = 0;\n  while (result.length > currentIndex) {\n    const row = result[currentIndex];\n    const levelKey = getRowLevelKey(row);\n    if (levelKey) {\n      const headerIndex = headerRows.findIndex(headerRow => getRowLevelKey(headerRow) === levelKey);\n      if (headerIndex === -1) {\n        headerRows = [...headerRows, row];\n      } else {\n        headerRows = [...headerRows.slice(0, headerIndex), row];\n      }\n      if (headerRows.length >= pageSize) {\n        throw new Error(PAGE_HEADERS_OVERFLOW_ERROR);\n      }\n    }\n    const indexInPage = currentIndex % pageSize;\n    if (indexInPage < headerRows.length && row !== headerRows[indexInPage]) {\n      result = [\n        ...result.slice(0, currentIndex),\n        headerRows[indexInPage],\n        ...result.slice(currentIndex),\n      ];\n    }\n    currentIndex += 1;\n  }\n\n  return result;\n};\n\nexport const rowCount = rows => rows.length;\n\nexport const pageCount = (count, pageSize) => (\n  pageSize ? Math.ceil(count / pageSize) : 1\n);\n\nexport const currentPage = (page, totalCount, pageSize, setCurrentPage) => {\n  const totalPages = pageCount(totalCount, pageSize);\n  const adjustedCurrentPage = clamp(page, totalPages - 1);\n  if (page !== adjustedCurrentPage) {\n    setTimeout(() => setCurrentPage(adjustedCurrentPage));\n  }\n  return adjustedCurrentPage;\n};\n","export const firstRowOnPage = (currentPage, pageSize, totalCount) => {\n  if (totalCount === 0) {\n    return 0;\n  }\n  return pageSize ? (currentPage * pageSize) + 1 : 1;\n};\n\nexport const lastRowOnPage = (currentPage, pageSize, totalRowCount) => {\n  let result = totalRowCount;\n  if (pageSize) {\n    const index = (currentPage + 1) * pageSize;\n    result = index > totalRowCount ? totalRowCount : index;\n  }\n\n  return result;\n};\n\nexport const calculateStartPage = (currentPage, maxButtonCount, totalPageCount) => Math.max(\n  Math.min(\n    currentPage - Math.floor(maxButtonCount / 2, 10),\n    (totalPageCount - maxButtonCount) + 1,\n  ),\n  1,\n);\n","export const toggle = (source, items, state) => {\n  const itemsSet = new Set(items);\n\n  let sourceState = state;\n  if (sourceState === undefined) {\n    const availableSelection = source.filter(item => itemsSet.has(item));\n    sourceState = availableSelection.length !== itemsSet.size;\n  }\n\n  if (sourceState) {\n    const sourceSet = new Set(source);\n    return [\n      ...source,\n      ...items.filter(item => !sourceSet.has(item)),\n    ];\n  }\n\n  return source.filter(item => !itemsSet.has(item));\n};\n","import { toggle } from '../../utils/common-reducers';\n\nexport const toggleSelection = (selection, { rowIds, state }) => toggle(selection, rowIds, state);\n","export const rowsWithAvailableToSelect = (rows, getRowId, isGroupRow) => {\n  let dataRows = rows;\n  if (isGroupRow) {\n    dataRows = dataRows.filter(row => !isGroupRow(row));\n  }\n  return { rows, availableToSelect: dataRows.map(row => getRowId(row)) };\n};\n\nexport const someSelected = ({ availableToSelect }, selection) => {\n  const selectionSet = new Set(selection);\n\n  return availableToSelect.length !== 0 && selectionSet.size !== 0\n    && availableToSelect.some(elem => selectionSet.has(elem))\n    && availableToSelect.some(elem => !selectionSet.has(elem));\n};\n\nexport const allSelected = ({ availableToSelect }, selection) => {\n  const selectionSet = new Set(selection);\n\n  return selectionSet.size !== 0 && availableToSelect.length !== 0\n    && !availableToSelect.some(elem => !selectionSet.has(elem));\n};\n\nexport const unwrapSelectedRows = ({ rows }) => rows;\n","export const startEditRows = (prevEditingRowIds, { rowIds }) => [...prevEditingRowIds, ...rowIds];\n\nexport const stopEditRows = (prevEditingRowIds, { rowIds }) => {\n  const rowIdSet = new Set(rowIds);\n  return prevEditingRowIds.filter(id => !rowIdSet.has(id));\n};\n\nexport const addRow = (addedRows, { row } = { row: {} }) => [...addedRows, row];\n\nexport const changeAddedRow = (addedRows, { rowId, change }) => {\n  const result = addedRows.slice();\n  result[rowId] = { ...result[rowId], ...change };\n  return result;\n};\n\nexport const cancelAddedRows = (addedRows, { rowIds }) => {\n  const result = [];\n  const indexSet = new Set(rowIds);\n  addedRows.forEach((row, index) => {\n    if (!indexSet.has(index)) {\n      result.push(row);\n    }\n  });\n  return result;\n};\n\nexport const changeRow = (prevRowChanges, { rowId, change }) => {\n  const prevChange = prevRowChanges[rowId] || {};\n  return {\n    ...prevRowChanges,\n    [rowId]: {\n      ...prevChange,\n      ...change,\n    },\n  };\n};\n\nexport const cancelChanges = (prevRowChanges, { rowIds }) => {\n  const result = { ...prevRowChanges };\n  rowIds.forEach((rowId) => {\n    delete result[rowId];\n  });\n  return result;\n};\n\nexport const deleteRows = (deletedRowIds, { rowIds }) => [...deletedRowIds, ...rowIds];\n\nexport const cancelDeletedRows = (deletedRowIds, { rowIds }) => {\n  const rowIdSet = new Set(rowIds);\n  return deletedRowIds.filter(rowId => !rowIdSet.has(rowId));\n};\n","export const changedRowsByIds = (changes, rowIds) => {\n  const result = {};\n  rowIds.forEach((rowId) => {\n    result[rowId] = changes[rowId];\n  });\n  return result;\n};\n\nexport const addedRowsByIds = (addedRows, rowIds) => {\n  const rowIdSet = new Set(rowIds);\n  const result = [];\n  addedRows.forEach((row, index) => {\n    if (rowIdSet.has(index)) {\n      result.push(row);\n    }\n  });\n  return result;\n};\n\nconst defaultCreateRowChange = (row, value, columnName) => ({ [columnName]: value });\nexport const createRowChangeGetter = (\n  createRowChange = defaultCreateRowChange,\n  columnExtensions = [],\n) => {\n  const map = columnExtensions.reduce((acc, columnExtension) => {\n    if (columnExtension.createRowChange) {\n      acc[columnExtension.columnName] = columnExtension.createRowChange;\n    }\n    return acc;\n  }, {});\n\n  return (row, value, columnName) => {\n    if (map[columnName]) {\n      return map[columnName](row, value, columnName);\n    }\n    return createRowChange(row, value, columnName);\n  };\n};\n","export const getRowChange = (rowChanges, rowId) => rowChanges[rowId] || {};\n","export const TABLE_REORDERING_TYPE = Symbol('reordering');\n","export const changeColumnOrder = (order, { sourceColumnName, targetColumnName }) => {\n  const sourceColumnIndex = order.indexOf(sourceColumnName);\n  const targetColumnIndex = order.indexOf(targetColumnName);\n  const newOrder = order.slice();\n\n  newOrder.splice(sourceColumnIndex, 1);\n  newOrder.splice(targetColumnIndex, 0, sourceColumnName);\n  return newOrder;\n};\n","export const TABLE_DATA_TYPE = Symbol('data');\nexport const TABLE_NODATA_TYPE = Symbol('nodata');\nexport const TABLE_FLEX_TYPE = Symbol('flex');\n","import mergeSort from '../../utils/merge-sort';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_REORDERING_TYPE } from './constants';\n\nexport const orderedColumns = (tableColumns, order) => mergeSort(tableColumns, (a, b) => {\n  if (a.type !== TABLE_DATA_TYPE || b.type !== TABLE_DATA_TYPE) return 0;\n\n  const aPos = order.indexOf(a.column.name);\n  const bPos = order.indexOf(b.column.name);\n  return aPos - bPos;\n});\n\nexport const tableHeaderRowsWithReordering = tableHeaderRows => [\n  ...tableHeaderRows,\n  {\n    key: TABLE_REORDERING_TYPE.toString(),\n    type: TABLE_REORDERING_TYPE,\n    height: 0,\n  },\n];\n\nexport const draftOrder = (order, sourceColumnIndex, targetColumnIndex) => {\n  if (sourceColumnIndex === -1\n    || targetColumnIndex === -1\n    || sourceColumnIndex === targetColumnIndex) {\n    return order;\n  }\n\n  const result = order.slice();\n  const sourceColumn = order[sourceColumnIndex];\n  result.splice(sourceColumnIndex, 1);\n  result.splice(targetColumnIndex, 0, sourceColumn);\n\n  return result;\n};\n","import { TABLE_DATA_TYPE } from '../table/constants';\n\nconst UNSET_COLUMN_WIDTH_ERROR = [\n  'The \"$1\" column\\'s width is not specified.',\n  'The TableColumnResizing plugin requires that all columns have the specified width.',\n].join('\\n');\n\nconst specifyWidths = (tableColumns, widths, onAbsence) => {\n  if (!widths.length) return tableColumns;\n  return tableColumns\n    .reduce((acc, tableColumn) => {\n      if (tableColumn.type === TABLE_DATA_TYPE) {\n        const columnName = tableColumn.column.name;\n        const column = widths.find(el => el.columnName === columnName);\n        const width = column && column.width;\n        if (width === undefined) {\n          onAbsence(columnName);\n          acc.push(tableColumn);\n        } else {\n          acc.push({ ...tableColumn, width });\n        }\n      } else {\n        acc.push(tableColumn);\n      }\n      return acc;\n    }, []);\n};\n\nexport const tableColumnsWithWidths = (\n  tableColumns, columnWidths,\n) => specifyWidths(tableColumns, columnWidths, (columnName) => {\n  throw new Error(UNSET_COLUMN_WIDTH_ERROR.replace('$1', columnName));\n});\n\nexport const tableColumnsWithDraftWidths = (\n  tableColumns, draftColumnWidths,\n) => specifyWidths(tableColumns, draftColumnWidths, () => {});\n","export const changeTableColumnWidth = (state, { columnName, shift, minColumnWidth }) => {\n  const { columnWidths } = state;\n  const nextColumnWidth = columnWidths.slice();\n  const index = nextColumnWidth.findIndex(elem => elem.columnName === columnName);\n  const updatedColumn = nextColumnWidth[index];\n  const size = Math.max(minColumnWidth, updatedColumn.width + shift);\n  nextColumnWidth.splice(index, 1, { columnName, width: size });\n\n  return {\n    columnWidths: nextColumnWidth,\n  };\n};\n\nexport const draftTableColumnWidth = (state, { columnName, shift, minColumnWidth }) => {\n  const { columnWidths } = state;\n  const updatedColumn = columnWidths.find(elem => elem.columnName === columnName);\n  const size = Math.max(minColumnWidth, updatedColumn.width + shift);\n\n  return {\n    draftColumnWidths: [{ columnName: updatedColumn.columnName, width: size }],\n  };\n};\n\nexport const cancelTableColumnWidthDraft = () => ({\n  draftColumnWidths: [],\n});\n","export const TABLE_EDIT_COMMAND_TYPE = Symbol('editCommand');\n","export const TABLE_ADDED_TYPE = Symbol('added');\nexport const TABLE_EDIT_TYPE = Symbol('edit');\n","export const TABLE_HEADING_TYPE = Symbol('heading');\n","import { TABLE_ADDED_TYPE, TABLE_EDIT_TYPE } from '../table-edit-row/constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_HEADING_TYPE } from '../table-header-row/constants';\nimport { TABLE_EDIT_COMMAND_TYPE } from './constants';\n\nexport const isHeadingEditCommandsTableCell = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_HEADING_TYPE && tableColumn.type === TABLE_EDIT_COMMAND_TYPE;\nexport const isEditCommandsTableCell = (\n  tableRow, tableColumn,\n) => (tableRow.type === TABLE_DATA_TYPE || tableRow.type === TABLE_ADDED_TYPE\n  || tableRow.type === TABLE_EDIT_TYPE) && tableColumn.type === TABLE_EDIT_COMMAND_TYPE;\n","import { TABLE_EDIT_COMMAND_TYPE } from './constants';\n\nexport const tableColumnsWithEditing = (tableColumns, width) => [\n  { key: TABLE_EDIT_COMMAND_TYPE.toString(), type: TABLE_EDIT_COMMAND_TYPE, width },\n  ...tableColumns];\n","import { TABLE_ADDED_TYPE, TABLE_EDIT_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isEditTableCell = (\n  tableRow, tableColumn,\n) => (tableRow.type === TABLE_ADDED_TYPE || tableRow.type === TABLE_EDIT_TYPE)\n  && tableColumn.type === TABLE_DATA_TYPE;\nexport const isAddedTableRow = tableRow => tableRow.type === TABLE_ADDED_TYPE;\nexport const isEditTableRow = tableRow => tableRow.type === TABLE_EDIT_TYPE;\n","import { TABLE_ADDED_TYPE, TABLE_EDIT_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const tableRowsWithEditing = (tableRows, editingRowIds, addedRows, rowHeight) => {\n  const rowIds = new Set(editingRowIds);\n  const editedTableRows = tableRows\n    .map(tableRow => (\n      tableRow.type === TABLE_DATA_TYPE && rowIds.has(tableRow.rowId)\n        ? {\n          ...tableRow,\n          type: TABLE_EDIT_TYPE,\n          height: rowHeight,\n        }\n        : tableRow\n    ));\n\n  const addedTableRows = addedRows\n    .map((row, rowIndex) => ({\n      key: `${TABLE_ADDED_TYPE.toString()}_${rowIndex}`,\n      type: TABLE_ADDED_TYPE,\n      rowId: rowIndex,\n      height: rowHeight,\n      row,\n    }));\n\n  return [\n    ...addedTableRows.reverse(),\n    ...editedTableRows,\n  ];\n};\n","export const TABLE_FILTER_TYPE = Symbol('filter');\nexport const DEFAULT_FILTER_OPERATIONS = [\n  'contains',\n  'notContains',\n  'startsWith',\n  'endsWith',\n  'equal',\n  'notEqual',\n];\n","import { TABLE_FILTER_TYPE, DEFAULT_FILTER_OPERATIONS } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isFilterTableCell = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_FILTER_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n\nexport const isFilterTableRow = tableRow => tableRow.type === TABLE_FILTER_TYPE;\n\nexport const getColumnFilterOperations = (\n  getAvailableFilterOperations, columnName,\n) => (getAvailableFilterOperations && getAvailableFilterOperations(columnName))\n  || DEFAULT_FILTER_OPERATIONS;\n\nexport const isFilterValueEmpty = value => value === undefined || !String(value).length;\n\nexport const getSelectedFilterOperation = (\n  filterOperations, columnName, columnFilter, columnFilterOperations,\n) => {\n  if (filterOperations[columnName]) {\n    return filterOperations[columnName];\n  }\n  return columnFilter && columnFilter.operation\n    ? columnFilter.operation\n    : columnFilterOperations[0];\n};\n","import { TABLE_FILTER_TYPE } from './constants';\n\nexport const tableHeaderRowsWithFilter = (headerRows, rowHeight) => [\n  ...headerRows,\n  { key: TABLE_FILTER_TYPE.toString(), type: TABLE_FILTER_TYPE, height: rowHeight }];\n","export const TABLE_GROUP_TYPE = Symbol('group');\n","import { TABLE_GROUP_TYPE } from './constants';\n\nexport const isGroupTableCell = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_GROUP_TYPE && tableColumn.type === TABLE_GROUP_TYPE\n  && tableRow.row.groupedBy === tableColumn.column.name;\nexport const isGroupIndentTableCell = (tableRow, tableColumn, grouping) => {\n  if (tableRow.type !== TABLE_GROUP_TYPE || tableColumn.type !== TABLE_GROUP_TYPE) return false;\n  if (tableRow.row.groupedBy === tableColumn.column.name) return false;\n  const rowGroupIndex = grouping.findIndex(\n    columnGrouping => columnGrouping.columnName === tableRow.row.groupedBy,\n  );\n  const columnGroupIndex = grouping.findIndex(\n    columnGrouping => columnGrouping.columnName === tableColumn.column.name,\n  );\n  return columnGroupIndex < rowGroupIndex;\n};\nexport const isGroupTableRow = tableRow => tableRow.type === TABLE_GROUP_TYPE;\n","import { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_GROUP_TYPE } from './constants';\n\nconst tableColumnsWithDraftGrouping = (\n  tableColumns, grouping, draftGrouping, showColumnWhenGrouped,\n) => tableColumns\n  .reduce((acc, tableColumn) => {\n    if (tableColumn.type !== TABLE_DATA_TYPE) {\n      acc.push(tableColumn);\n      return acc;\n    }\n\n    const columnName = tableColumn.column.name;\n    const columnGroupingExists = grouping\n      .some(columnGrouping => columnGrouping.columnName === columnName);\n    const columnDraftGroupingExists = draftGrouping\n      .some(columnGrouping => columnGrouping.columnName === columnName);\n\n    if ((!columnGroupingExists && !columnDraftGroupingExists)\n        || showColumnWhenGrouped(columnName)) {\n      acc.push(tableColumn);\n    } else if ((!columnGroupingExists && columnDraftGroupingExists)\n        || (columnGroupingExists && !columnDraftGroupingExists)) {\n      acc.push({\n        ...tableColumn,\n        draft: true,\n      });\n    }\n    return acc;\n  }, []);\n\nexport const tableColumnsWithGrouping = (\n  columns,\n  tableColumns,\n  grouping,\n  draftGrouping,\n  indentColumnWidth,\n  showColumnWhenGrouped,\n) => [\n  ...grouping.map((columnGrouping) => {\n    const groupedColumn = columns.find(column => column.name === columnGrouping.columnName);\n    return {\n      key: `${TABLE_GROUP_TYPE.toString()}_${groupedColumn.name}`,\n      type: TABLE_GROUP_TYPE,\n      column: groupedColumn,\n      width: indentColumnWidth,\n    };\n  }),\n  ...tableColumnsWithDraftGrouping(tableColumns, grouping, draftGrouping, showColumnWhenGrouped),\n];\n\nexport const tableRowsWithGrouping = (tableRows, isGroupRow) => tableRows.map((tableRow) => {\n  if (tableRow.type !== TABLE_DATA_TYPE || !isGroupRow(tableRow.row)) {\n    return tableRow;\n  }\n  return {\n    ...tableRow,\n    key: `${TABLE_GROUP_TYPE.toString()}_${tableRow.row.compoundKey}`,\n    type: TABLE_GROUP_TYPE,\n  };\n});\n\nexport const tableGroupCellColSpanGetter = getTableCellColSpan => (params) => {\n  const { tableRow, tableColumns, tableColumn } = params;\n  if (tableRow.type === TABLE_GROUP_TYPE && tableColumn.type === TABLE_GROUP_TYPE\n    && tableRow.row.groupedBy === tableColumn.column.name) {\n    return tableColumns.length - tableColumns.indexOf(tableColumn);\n  }\n  return getTableCellColSpan(params);\n};\n","import { TABLE_HEADING_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isHeadingTableCell = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_HEADING_TYPE && tableColumn.type === TABLE_DATA_TYPE;\n\nexport const isHeadingTableRow = tableRow => (tableRow.type === TABLE_HEADING_TYPE);\n","import { TABLE_HEADING_TYPE } from './constants';\n\nexport const tableRowsWithHeading = headerRows => [\n  { key: TABLE_HEADING_TYPE.toString(), type: TABLE_HEADING_TYPE },\n  ...headerRows];\n","export const TABLE_BAND_TYPE = Symbol('band');\nexport const BAND_GROUP_CELL = 'bandGroupCell';\nexport const BAND_HEADER_CELL = 'bandHeaderCell';\nexport const BAND_EMPTY_CELL = 'bandEmptyCell';\nexport const BAND_DUPLICATE_RENDER = 'bandDuplicateRender';\n","import {\n  TABLE_BAND_TYPE, BAND_GROUP_CELL, BAND_HEADER_CELL, BAND_EMPTY_CELL, BAND_DUPLICATE_RENDER,\n} from './constants';\nimport { TABLE_HEADING_TYPE } from '../table-header-row/constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isBandedTableRow = tableRow => (tableRow.type === TABLE_BAND_TYPE);\nexport const isBandedOrHeaderRow = tableRow => isBandedTableRow(tableRow)\n  || tableRow.type === TABLE_HEADING_TYPE;\nexport const isNoDataColumn = columnType => columnType !== TABLE_DATA_TYPE;\n\nexport const getColumnMeta = (\n  columnName, bands, tableRowLevel,\n  level = 0, title = null, result = null,\n) => bands.reduce((acc, column) => {\n  if (column.columnName === columnName) {\n    acc.title = title;\n    acc.level = level;\n    return acc;\n  }\n  if (column.children !== undefined) {\n    return getColumnMeta(\n      columnName,\n      column.children,\n      tableRowLevel,\n      level + 1,\n      level > tableRowLevel ? title : column.title,\n      acc,\n    );\n  }\n  return acc;\n}, result || { level, title });\n\nexport const getColSpan = (\n  currentColumnIndex, tableColumns, columnBands,\n  currentRowLevel, currentColumnTitle, isCurrentColumnFixed,\n) => {\n  let isOneChain = true;\n  return tableColumns.slice(currentColumnIndex + 1)\n    .reduce((acc, tableColumn) => {\n      if (tableColumn.type !== TABLE_DATA_TYPE) return acc;\n      const columnMeta = getColumnMeta(tableColumn.column.name, columnBands, currentRowLevel);\n      if (isCurrentColumnFixed && !tableColumn.fixed) {\n        isOneChain = false;\n      }\n      if (isOneChain && columnMeta.title === currentColumnTitle) {\n        return acc + 1;\n      }\n      isOneChain = false;\n      return acc;\n    }, 1);\n};\n\nexport const getBandComponent = (\n  { tableColumn: currentTableColumn, tableRow, rowSpan },\n  tableHeaderRows, tableColumns, columnBands,\n) => {\n  if (rowSpan) return { type: BAND_DUPLICATE_RENDER, payload: null };\n\n  const maxLevel = tableHeaderRows.filter(column => column.type === TABLE_BAND_TYPE).length + 1;\n  const currentRowLevel = tableRow.level === undefined\n    ? maxLevel - 1 : tableRow.level;\n  const currentColumnMeta = currentTableColumn.type === TABLE_DATA_TYPE\n    ? getColumnMeta(currentTableColumn.column.name, columnBands, currentRowLevel)\n    : { level: 0, title: '' };\n\n  if (currentColumnMeta.level < currentRowLevel) return { type: BAND_EMPTY_CELL, payload: null };\n  const currentColumnIndex = tableColumns\n    .findIndex(column => column.key === currentTableColumn.key);\n  const previousTableColumn = tableColumns[currentColumnIndex - 1];\n  let beforeBorder = false;\n  if (currentColumnIndex > 0 && currentTableColumn.type === TABLE_DATA_TYPE\n    && isNoDataColumn(previousTableColumn.type)) {\n    beforeBorder = true;\n  }\n  if (currentColumnMeta.level === currentRowLevel) {\n    return {\n      type: BAND_HEADER_CELL,\n      payload: {\n        tableRow: tableHeaderRows.find(row => row.type === TABLE_HEADING_TYPE),\n        rowSpan: maxLevel - currentRowLevel,\n        ...beforeBorder && { beforeBorder },\n      },\n    };\n  }\n\n  const isCurrentColumnFixed = !!currentTableColumn.fixed;\n  if (currentColumnIndex > 0 && previousTableColumn.type === TABLE_DATA_TYPE) {\n    const isPrevColumnFixed = !!previousTableColumn.fixed;\n    const prevColumnMeta = getColumnMeta(\n      previousTableColumn.column.name,\n      columnBands,\n      currentRowLevel,\n    );\n    if (prevColumnMeta.title === currentColumnMeta.title\n      && (!isPrevColumnFixed || (isPrevColumnFixed && isCurrentColumnFixed))) {\n      return { type: null, payload: null };\n    }\n  }\n\n  return {\n    type: BAND_GROUP_CELL,\n    payload: {\n      colSpan: getColSpan(\n        currentColumnIndex,\n        tableColumns,\n        columnBands,\n        currentRowLevel,\n        currentColumnMeta.title,\n        isCurrentColumnFixed,\n      ),\n      value: currentColumnMeta.title,\n      column: currentColumnMeta,\n      ...beforeBorder && { beforeBorder },\n    },\n  };\n};\n","import { TABLE_BAND_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const tableRowsWithBands = (tableHeaderRows, columnBands, tableColumns) => {\n  const tableDataColumns = tableColumns.filter(column => column.type === TABLE_DATA_TYPE);\n  const getMaxNestedLevel = (bands, level = 0, result = null) => bands.reduce((acc, column) => {\n    if (column.children !== undefined) {\n      return getMaxNestedLevel(column.children, level + 1, acc);\n    }\n    const isDataColumn = tableDataColumns.findIndex(\n      dataColumn => dataColumn.column.name === column.columnName,\n    ) > -1;\n    if (level > acc.level && isDataColumn) {\n      acc.level = level;\n      return acc;\n    }\n    return acc;\n  }, result || { level: 0 });\n\n  const tableBandHeaders = Array.from({ length: getMaxNestedLevel(columnBands, 0).level })\n    .map((row, index) => ({ key: `${TABLE_BAND_TYPE.toString()}_${index}`, type: TABLE_BAND_TYPE, level: index }));\n  return [...tableBandHeaders, ...tableHeaderRows];\n};\n","import { toggle } from '../../utils/common-reducers';\n\nexport const toggleDetailRowExpanded = (\n  prevExpanded, { rowId, state },\n) => toggle(prevExpanded, [rowId], state);\n","export const TABLE_DETAIL_TYPE = Symbol('detail');\n","import { TABLE_DETAIL_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isDetailRowExpanded = (\n  expandedDetailRowIds, rowId,\n) => expandedDetailRowIds.indexOf(rowId) > -1;\nexport const isDetailToggleTableCell = (\n  tableRow, tableColumn,\n) => tableColumn.type === TABLE_DETAIL_TYPE && tableRow.type === TABLE_DATA_TYPE;\nexport const isDetailTableRow = tableRow => tableRow.type === TABLE_DETAIL_TYPE;\nexport const isDetailTableCell = (\n  tableColumn, tableColumns,\n) => tableColumns.indexOf(tableColumn) === 0;\n","import { TABLE_DETAIL_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const tableRowsWithExpandedDetail = (tableRows, expandedDetailRowIds, rowHeight) => {\n  let result = tableRows;\n  expandedDetailRowIds\n    .forEach((expandedRowId) => {\n      const rowIndex = result.findIndex(\n        tableRow => tableRow.type === TABLE_DATA_TYPE && tableRow.rowId === expandedRowId,\n      );\n      if (rowIndex === -1) return;\n      const insertIndex = rowIndex + 1;\n      const { row, rowId } = result[rowIndex];\n      result = [\n        ...result.slice(0, insertIndex),\n        {\n          key: `${TABLE_DETAIL_TYPE.toString()}_${rowId}`,\n          type: TABLE_DETAIL_TYPE,\n          rowId,\n          row,\n          height: rowHeight,\n        },\n        ...result.slice(insertIndex),\n      ];\n    });\n  return result;\n};\n\nexport const tableColumnsWithDetail = (tableColumns, toggleColumnWidth) => [\n  { key: TABLE_DETAIL_TYPE.toString(), type: TABLE_DETAIL_TYPE, width: toggleColumnWidth },\n  ...tableColumns,\n];\n\nexport const tableDetailCellColSpanGetter = getTableCellColSpan => (params) => {\n  const { tableRow, tableColumns, tableColumn } = params;\n  if (tableRow.type === TABLE_DETAIL_TYPE && tableColumns.indexOf(tableColumn) === 0) {\n    return tableColumns.length;\n  }\n  return getTableCellColSpan(params);\n};\n","export const TABLE_SELECT_TYPE = Symbol('select');\n","import { TABLE_SELECT_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\nimport { TABLE_HEADING_TYPE } from '../table-header-row/constants';\n\nexport const isSelectTableCell = (\n  tableRow, tableColumn,\n) => tableColumn.type === TABLE_SELECT_TYPE && tableRow.type === TABLE_DATA_TYPE;\nexport const isSelectAllTableCell = (\n  tableRow, tableColumn,\n) => tableColumn.type === TABLE_SELECT_TYPE && tableRow.type === TABLE_HEADING_TYPE;\n","import { TABLE_SELECT_TYPE } from './constants';\n\nexport const tableColumnsWithSelection = (tableColumns, selectionColumnWidth) => [\n  { key: TABLE_SELECT_TYPE.toString(), type: TABLE_SELECT_TYPE, width: selectionColumnWidth },\n  ...tableColumns,\n];\n","import { TABLE_DATA_TYPE, TABLE_NODATA_TYPE } from './constants';\n\nexport const isDataTableCell = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_DATA_TYPE && tableColumn.type === TABLE_DATA_TYPE;\nexport const isHeaderStubTableCell = (tableRow, headerRows) => headerRows.indexOf(tableRow) > -1;\nexport const isDataTableRow = tableRow => tableRow.type === TABLE_DATA_TYPE;\nexport const isNoDataTableRow = tableRow => tableRow.type === TABLE_NODATA_TYPE;\nexport const isNoDataTableCell = (\n  tableColumn, tableColumns,\n) => tableColumns.indexOf(tableColumn) === 0;\n","export const getColumnExtension = (columnExtensions, columnName) => {\n  if (!columnExtensions) {\n    return {};\n  }\n  const columnExtension = columnExtensions.find(extension => extension.columnName === columnName);\n  if (!columnExtension) {\n    return {};\n  }\n  return columnExtension;\n};\n\nexport const getColumnExtensionValueGetter = (\n  columnExtensions, extensionName, defaultValue,\n) => (columnName) => {\n  if (columnExtensions) {\n    const columnExtension = getColumnExtension(columnExtensions, columnName);\n    const extensionValue = columnExtension[extensionName];\n    return extensionValue !== undefined ? extensionValue : defaultValue;\n  }\n  return defaultValue;\n};\n","import { TABLE_DATA_TYPE, TABLE_NODATA_TYPE } from './constants';\nimport { getColumnExtension } from '../../utils/column-extension';\n\nexport const tableColumnsWithDataRows = (columns, columnExtensions) => columns.map((column) => {\n  const { name } = column;\n  const columnExtension = getColumnExtension(columnExtensions, name);\n  return {\n    key: `${TABLE_DATA_TYPE.toString()}_${name}`,\n    type: TABLE_DATA_TYPE,\n    width: columnExtension.width,\n    align: columnExtension.align,\n    wordWrapEnabled: columnExtension.wordWrapEnabled,\n    column,\n  };\n});\n\nexport const tableRowsWithDataRows = (rows, getRowId) => (\n  !rows.length\n    ? [{ key: TABLE_NODATA_TYPE.toString(), type: TABLE_NODATA_TYPE }]\n    : rows.map((row) => {\n      const rowId = getRowId(row);\n      return {\n        row,\n        rowId,\n        type: TABLE_DATA_TYPE,\n        key: `${TABLE_DATA_TYPE.toString()}_${rowId}`,\n      };\n    }));\n\nexport const tableCellColSpanGetter = (params) => {\n  const { tableRow, tableColumns, tableColumn } = params;\n  if (tableRow.type === TABLE_NODATA_TYPE && tableColumns.indexOf(tableColumn) === 0) {\n    return tableColumns.length;\n  }\n  return 1;\n};\n","import { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const visibleTableColumns = (\n  tableColumns, hiddenColumnNames,\n) => tableColumns.filter(tableColumn => tableColumn.type !== TABLE_DATA_TYPE\n    || hiddenColumnNames.indexOf(tableColumn.column.name) === -1);\n","import { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const tableDataColumnsExist = tableColumns => tableColumns.some(\n  column => column.type === TABLE_DATA_TYPE,\n);\n","export const columnChooserItems = (columns, hiddenColumnNames) => columns.map(column => ({\n  column,\n  hidden: hiddenColumnNames.indexOf(column.name) !== -1,\n}));\n","export const toggleColumn = (hiddenColumnNames, columnName) => (\n  hiddenColumnNames.indexOf(columnName) === -1\n    ? [...hiddenColumnNames, columnName]\n    : hiddenColumnNames.filter(hiddenColumn => hiddenColumn !== columnName)\n);\n","import { toggle } from '../../utils/common-reducers';\n\nexport const toggleRowExpanded = (\n  prevExpanded, { rowId, state },\n) => toggle(prevExpanded, [rowId], state);\n","export const GRID_TREE_NODE_TYPE = Symbol('treeNode');\n","import { GRID_TREE_NODE_TYPE } from './constants';\n\nconst customTreeRows = (\n  currentRow,\n  getChildRows,\n  rootRows,\n  level = 0,\n) => {\n  const childRows = getChildRows(currentRow, rootRows);\n\n  if (!childRows) return { rows: [], treeMeta: [], empty: true };\n\n  return childRows\n    .reduce((acc, row) => {\n      const nestedResult = customTreeRows(\n        row,\n        getChildRows,\n        rootRows,\n        level + 1,\n      );\n      acc.rows.push(row, ...nestedResult.rows);\n      acc.treeMeta.push([row, { level, leaf: !!nestedResult.empty }], ...nestedResult.treeMeta);\n\n      return acc;\n    }, { rows: [], treeMeta: [] });\n};\n\nexport const customTreeRowsWithMeta = (\n  rows,\n  getChildRows,\n) => {\n  const result = customTreeRows(null, getChildRows, rows);\n\n  return {\n    rows: result.rows,\n    treeMeta: new Map(result.treeMeta),\n  };\n};\n\nexport const customTreeRowIdGetter = (getRowId, { rows, treeMeta }) => {\n  const firstNestedRowIndex = rows.findIndex(row => treeMeta.get(row).level > 0);\n  if (firstNestedRowIndex === -1 || getRowId(rows[firstNestedRowIndex]) !== undefined) {\n    return getRowId;\n  }\n  const map = new Map(rows\n    .map((row, rowIndex) => [row, rowIndex]));\n  return row => map.get(row);\n};\n\nexport const customTreeRowLevelKeyGetter = (getRowLevelKey, { treeMeta }) => (row) => {\n  const rowMeta = treeMeta.get(row);\n  if (rowMeta !== undefined) {\n    return `${GRID_TREE_NODE_TYPE.toString()}_${rowMeta.level}`;\n  }\n  return getRowLevelKey && getRowLevelKey();\n};\n\nexport const expandedTreeRows = ({ rows, treeMeta }, getRowId, expandedRowIds) => {\n  const expandedRowIdsSet = new Set(expandedRowIds);\n\n  let currentExpanded = true;\n  let currentLevel = 0;\n  return rows.reduce((acc, row) => {\n    const rowMeta = treeMeta.get(row);\n    const level = rowMeta && rowMeta.level;\n    if (level === undefined && currentExpanded) {\n      acc.rows.push(row);\n      return acc;\n    }\n\n    if (!currentExpanded && (level === undefined || level > currentLevel)) {\n      const lastRow = acc.rows[acc.rows.length - 1];\n      let collapsedItems = acc.collapsedRowsMeta.get(lastRow);\n      if (!collapsedItems) {\n        collapsedItems = [];\n        acc.collapsedRowsMeta.set(lastRow, collapsedItems);\n      }\n      collapsedItems.push(row);\n      return acc;\n    }\n\n    currentExpanded = expandedRowIdsSet.has(getRowId(row));\n    currentLevel = level;\n\n    acc.rows.push(row);\n\n    return acc;\n  }, { rows: [], treeMeta, collapsedRowsMeta: new Map() });\n};\n\nexport const collapsedTreeRowsGetter = (\n  getCollapsedRows, { collapsedRowsMeta },\n) => row => collapsedRowsMeta.get(row) || (getCollapsedRows && getCollapsedRows(row));\n\nexport const isTreeRowLeafGetter = ({ treeMeta }) => (row) => {\n  const rowMeta = treeMeta.get(row);\n  return rowMeta && rowMeta.leaf;\n};\n\nexport const getTreeRowLevelGetter = ({ treeMeta }) => (row) => {\n  const rowMeta = treeMeta.get(row);\n  return rowMeta && rowMeta.level;\n};\n\nexport const unwrappedCustomTreeRows = ({ rows }) => rows;\n","import { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isTreeTableCell = (\n  tableRow, tableColumn, forColumnName,\n) => tableRow.type === TABLE_DATA_TYPE && tableColumn.type === TABLE_DATA_TYPE\n  && tableColumn.column.name === forColumnName;\n","export const changeSearchValue = (prevSearchValue, searchValue) => searchValue;\n","export const searchFilterExpression = (searchValue, columns, filterExpression) => {\n  const filters = columns.map(({ name }) => ({ columnName: name, value: searchValue }));\n  const selfFilterExpression = { operator: 'or', filters };\n  if (!filterExpression) {\n    return selfFilterExpression;\n  }\n  return {\n    operator: 'and',\n    filters: [filterExpression, selfFilterExpression],\n  };\n};\n","export const getAvailableFilterOperationsGetter = (\n  getAvailableFilterOperations,\n  availableFilterOperations,\n  columnNames,\n) => columnName => (columnNames.indexOf(columnName) > -1 && availableFilterOperations)\n    || (typeof getAvailableFilterOperations === 'function' && getAvailableFilterOperations(columnName))\n    || undefined;\n","export const FIXED_COLUMN_LEFT_SIDE = 'left';\nexport const FIXED_COLUMN_RIGHT_SIDE = 'right';\nexport const TABLE_FIXED_TYPE = Symbol('fixed');\n","import { TABLE_DATA_TYPE } from '../table/constants';\nimport {\n  FIXED_COLUMN_LEFT_SIDE, FIXED_COLUMN_RIGHT_SIDE, TABLE_FIXED_TYPE,\n} from './constants';\n\nexport const getFixedColumnKeys = (tableColumns, fixedNames) => tableColumns\n  .filter(tableColumn => (\n    (tableColumn.type === TABLE_DATA_TYPE && fixedNames.indexOf(tableColumn.column.name) !== -1)\n    || fixedNames.indexOf(tableColumn.type) !== -1\n  ))\n  .map(({ key }) => key);\n\nexport const isFixedTableRow = tableRow => tableRow.type === TABLE_FIXED_TYPE;\n\nconst calculatePosition = (array, index, tableColumnDimensions) => (\n  index === 0\n    ? 0\n    : array\n      .slice(0, index)\n      .reduce((acc, target) => acc + tableColumnDimensions[target] || 0, 0)\n);\n\nexport const calculateFixedColumnProps = (\n  { tableColumn },\n  { leftColumns, rightColumns },\n  tableColumns,\n  tableColumnDimensions,\n) => {\n  const { fixed: side } = tableColumn;\n  const targetArray = side === FIXED_COLUMN_LEFT_SIDE\n    ? getFixedColumnKeys(tableColumns, leftColumns)\n    : getFixedColumnKeys(tableColumns, rightColumns).reverse();\n\n  const fixedIndex = targetArray.indexOf(tableColumn.key);\n  const index = tableColumns.findIndex(({ key }) => key === tableColumn.key);\n\n  const isBoundary = fixedSide => (\n    fixedIndex === targetArray.length - 1 && fixedSide === side\n  );\n  const isStandAlone = (shift) => {\n    const neighborTableColumn = tableColumns[index + shift];\n    return neighborTableColumn && targetArray.indexOf(neighborTableColumn.key) === -1;\n  };\n\n  const showRightDivider = isBoundary(FIXED_COLUMN_LEFT_SIDE)\n    || (index !== tableColumns.length - 1 && isStandAlone(1));\n  const showLeftDivider = isBoundary(FIXED_COLUMN_RIGHT_SIDE)\n    || (index !== 0 && isStandAlone(-1));\n\n  const position = calculatePosition(targetArray, fixedIndex, tableColumnDimensions);\n\n  return {\n    showRightDivider,\n    showLeftDivider,\n    position,\n    side,\n  };\n};\n","import { TABLE_DATA_TYPE } from '../table/constants';\nimport { FIXED_COLUMN_LEFT_SIDE, FIXED_COLUMN_RIGHT_SIDE, TABLE_FIXED_TYPE } from './constants';\n\nexport const tableColumnsWithFixed = (\n  tableColumns, leftColumns, rightColumns,\n) => tableColumns\n  .map((tableColumn) => {\n    let fixed;\n    if ((tableColumn.type === TABLE_DATA_TYPE\n      && leftColumns.indexOf(tableColumn.column.name) !== -1)\n      || leftColumns.indexOf(tableColumn.type) !== -1) {\n      fixed = FIXED_COLUMN_LEFT_SIDE;\n    }\n    if ((tableColumn.type === TABLE_DATA_TYPE\n      && rightColumns.indexOf(tableColumn.column.name) !== -1)\n      || rightColumns.indexOf(tableColumn.type) !== -1) {\n      fixed = FIXED_COLUMN_RIGHT_SIDE;\n    }\n    return fixed ? { ...tableColumn, fixed } : tableColumn;\n  });\n\nexport const tableHeaderRowsWithFixed = tableHeaderRows => [\n  ...tableHeaderRows,\n  { key: TABLE_FIXED_TYPE.toString(), type: TABLE_FIXED_TYPE, height: 0 },\n];\n","const defaultSummaryCalculators = {\n  count: rows => rows.length,\n  sum: (rows, getValue) => rows.reduce((acc, row) => acc + getValue(row), 0),\n  max: (rows, getValue) => (rows.length\n    ? rows.reduce((acc, row) => Math.max(acc, getValue(row)), -Infinity)\n    : null),\n  min: (rows, getValue) => (rows.length\n    ? rows.reduce((acc, row) => Math.min(acc, getValue(row)), Infinity)\n    : null),\n  avg: (rows, getValue) => (rows.length\n    ? rows.reduce((acc, row) => acc + getValue(row), 0) / rows.length\n    : null),\n};\n\nexport const defaultSummaryCalculator = (type, rows, getValue) => {\n  const summaryCalculator = defaultSummaryCalculators[type];\n  if (!summaryCalculator) {\n    throw new Error(`The summary type '${type}' is not defined`);\n  }\n  return summaryCalculator(rows, getValue);\n};\n\nconst rowsSummary = (rows, summaryItems, getCellValue, calculator) => summaryItems\n  .reduce((acc, { type, columnName }) => {\n    const getValue = row => getCellValue(row, columnName);\n    acc.push(calculator(type, rows, getValue));\n    return acc;\n  }, []);\n\nexport const totalSummaryValues = (\n  rows,\n  summaryItems,\n  getCellValue,\n  getRowLevelKey,\n  isGroupRow,\n  getCollapsedRows,\n  calculator = defaultSummaryCalculator,\n) => {\n  const plainRows = rows.reduce((acc, row) => {\n    if (getRowLevelKey && getRowLevelKey(row)) {\n      if (!isGroupRow || !isGroupRow(row)) {\n        acc.push(row);\n      }\n      const collapsedRows = getCollapsedRows && getCollapsedRows(row);\n      if (collapsedRows) {\n        acc.push(...collapsedRows);\n      }\n      return acc;\n    }\n    acc.push(row);\n    return acc;\n  }, []);\n  return rowsSummary(plainRows, summaryItems, getCellValue, calculator);\n};\n\nexport const groupSummaryValues = (\n  rows,\n  summaryItems,\n  getCellValue,\n  getRowLevelKey,\n  isGroupRow,\n  calculator = defaultSummaryCalculator,\n) => {\n  let levels = [];\n  const summaries = {};\n  rows.forEach((row) => {\n    const levelKey = getRowLevelKey(row);\n    if (!levelKey) {\n      levels.forEach((level) => {\n        level.rows.push(row);\n      });\n    }\n    const levelIndex = levels.findIndex(level => level.levelKey === levelKey);\n    if (levelIndex > -1) {\n      levels.slice(levelIndex).forEach((level) => {\n        summaries[level.row.compoundKey] = rowsSummary(\n          level.rows, summaryItems, getCellValue, calculator,\n        );\n      });\n      levels = levels.slice(0, levelIndex);\n    }\n    if (isGroupRow(row)) {\n      levels.push({\n        levelKey,\n        row,\n        rows: [],\n      });\n    }\n  }, {});\n  levels.forEach((level) => {\n    summaries[level.row.compoundKey] = rowsSummary(\n      level.rows, summaryItems, getCellValue, calculator,\n    );\n  });\n  return summaries;\n};\n\nexport const treeSummaryValues = (\n  rows,\n  summaryItems,\n  getCellValue,\n  getRowLevelKey,\n  isGroupRow,\n  getRowId,\n  calculator = defaultSummaryCalculator,\n) => {\n  let levels = [];\n  const summaries = {};\n  rows.forEach((row) => {\n    const levelKey = getRowLevelKey(row);\n    if (!levelKey) {\n      levels[levels.length - 1].rows.push(row);\n      return;\n    }\n    const levelIndex = levels.findIndex(level => level.levelKey === levelKey);\n    if (levelIndex > -1) {\n      levels.slice(levelIndex).forEach((level) => {\n        if (level.rows.length) {\n          summaries[getRowId(level.row)] = rowsSummary(\n            level.rows, summaryItems, getCellValue, calculator,\n          );\n        }\n      });\n      levels = levels.slice(0, levelIndex);\n    }\n    if (!isGroupRow || !isGroupRow(row)) {\n      if (levels.length) {\n        levels[levels.length - 1].rows.push(row);\n      }\n      levels.push({\n        levelKey,\n        row,\n        rows: [],\n      });\n    }\n  }, {});\n  levels.forEach((level) => {\n    if (level.rows.length) {\n      summaries[getRowId(level.row)] = rowsSummary(\n        level.rows, summaryItems, getCellValue, calculator,\n      );\n    }\n  });\n  return summaries;\n};\n","export const TABLE_TOTAL_SUMMARY_TYPE = Symbol('totalSummary');\nexport const TABLE_GROUP_SUMMARY_TYPE = Symbol('groupSummary');\nexport const TABLE_TREE_SUMMARY_TYPE = Symbol('treeSummary');\n","import { TABLE_TOTAL_SUMMARY_TYPE, TABLE_GROUP_SUMMARY_TYPE, TABLE_TREE_SUMMARY_TYPE } from './constants';\n\nexport const tableRowsWithTotalSummaries = footerRows => [\n  { key: TABLE_TOTAL_SUMMARY_TYPE.toString(), type: TABLE_TOTAL_SUMMARY_TYPE },\n  ...footerRows,\n];\n\nexport const tableRowsWithSummaries = (tableRows, getRowLevelKey, isGroupRow, getRowId) => {\n  if (!getRowLevelKey) return tableRows;\n\n  const result = [];\n  const closeLevel = (level) => {\n    if (!level.opened) return;\n    if (isGroupRow && isGroupRow(level.row)) {\n      const { compoundKey } = level.row;\n      result.push({\n        key: `${TABLE_GROUP_SUMMARY_TYPE.toString()}_${compoundKey}`,\n        type: TABLE_GROUP_SUMMARY_TYPE,\n        row: level.row,\n      });\n    } else {\n      const rowId = getRowId(level.row);\n      result.push({\n        key: `${TABLE_TREE_SUMMARY_TYPE.toString()}_${rowId}`,\n        type: TABLE_TREE_SUMMARY_TYPE,\n        row: level.row,\n      });\n    }\n  };\n\n  let levels = [];\n  tableRows.forEach((tableRow) => {\n    const { row } = tableRow;\n    const levelKey = getRowLevelKey(row);\n    if (levelKey) {\n      const levelIndex = levels.findIndex(level => level.levelKey === levelKey);\n      if (levelIndex > -1) {\n        levels.slice(levelIndex).forEach(closeLevel);\n        levels = levels.slice(0, levelIndex);\n      }\n      if (!isGroupRow || !isGroupRow(row)) {\n        levels = levels.map(level => ({\n          ...level,\n          opened: true,\n        }));\n      }\n      levels.push({\n        levelKey,\n        row,\n        opened: false,\n      });\n    } else {\n      levels = levels.map(level => ({\n        ...level,\n        opened: true,\n      }));\n    }\n    result.push(tableRow);\n  });\n  levels.slice().reverse().forEach(closeLevel);\n\n  return result;\n};\n","import { TABLE_TOTAL_SUMMARY_TYPE, TABLE_GROUP_SUMMARY_TYPE, TABLE_TREE_SUMMARY_TYPE } from './constants';\nimport { TABLE_DATA_TYPE } from '../table/constants';\n\nexport const isTotalSummaryTableCell = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_TOTAL_SUMMARY_TYPE && tableColumn.type === TABLE_DATA_TYPE;\nexport const isGroupSummaryTableCell = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_GROUP_SUMMARY_TYPE && tableColumn.type === TABLE_DATA_TYPE;\nexport const isTreeSummaryTableCell = (\n  tableRow, tableColumn,\n) => tableRow.type === TABLE_TREE_SUMMARY_TYPE && tableColumn.type === TABLE_DATA_TYPE;\nexport const isTotalSummaryTableRow = tableRow => tableRow.type === TABLE_TOTAL_SUMMARY_TYPE;\nexport const isGroupSummaryTableRow = tableRow => tableRow.type === TABLE_GROUP_SUMMARY_TYPE;\nexport const isTreeSummaryTableRow = tableRow => tableRow.type === TABLE_TREE_SUMMARY_TYPE;\n\nexport const getColumnSummaries = (summaryItems, columnName, summaryValues) => summaryItems\n  .map((item, index) => [item, index])\n  .filter(([item]) => item.columnName === columnName)\n  .map(([item, index]) => ({ type: item.type, value: summaryValues[index] }));\n","export const getTargetColumnGeometries = (columnGeometries, sourceIndex) => {\n  const sourceWidth = columnGeometries[sourceIndex].right - columnGeometries[sourceIndex].left;\n  const getWidthDifference = index => columnGeometries[index].right\n                                      - columnGeometries[index].left\n                                      - sourceWidth;\n\n  return columnGeometries\n    .map(({\n      top, right, bottom, left,\n    }, targetIndex) => {\n      let leftBorder = left;\n      if (targetIndex > 0 && targetIndex <= sourceIndex) {\n        leftBorder = Math.min(leftBorder, leftBorder - getWidthDifference(targetIndex - 1));\n      }\n      if (targetIndex > sourceIndex) {\n        leftBorder = Math.max(leftBorder, leftBorder + getWidthDifference(targetIndex));\n      }\n      let rightBorder = right;\n      if (targetIndex < columnGeometries.length - 1 && targetIndex >= sourceIndex) {\n        rightBorder = Math.max(rightBorder, rightBorder + getWidthDifference(targetIndex + 1));\n      }\n      if (targetIndex < sourceIndex) {\n        rightBorder = Math.min(rightBorder, rightBorder - getWidthDifference(targetIndex));\n      }\n\n      return {\n        top,\n        right: rightBorder,\n        bottom,\n        left: leftBorder,\n      };\n    });\n};\n","import { easeOutCubic } from '@devexpress/dx-core';\nimport { getTargetColumnGeometries } from './column-geometries';\n\nexport const getTableColumnGeometries = (columns, tableWidth) => {\n  const columnWidths = columns\n    .map(column => column.width);\n\n  const freeSpace = tableWidth;\n  const restrictedSpace = columnWidths\n    .reduce((accum, width) => accum + (width || 0), 0);\n  const freeSpacePortions = columnWidths\n    .reduce((accum, width) => accum + (width === undefined ? 1 : 0), 0);\n  const freeSpacePortion = (freeSpace - restrictedSpace) / freeSpacePortions;\n\n  let lastRightPosition = 0;\n  return columnWidths\n    .map(width => (width === undefined ? freeSpacePortion : width))\n    .map((width) => {\n      lastRightPosition += width;\n      return {\n        left: lastRightPosition - width,\n        right: lastRightPosition,\n      };\n    });\n};\n\nexport const getTableTargetColumnIndex = (\n  columnGeometries, sourceIndex, offset,\n) => getTargetColumnGeometries(columnGeometries, sourceIndex)\n  .findIndex(({ left, right }) => offset > left && offset < right);\n\n\nconst ANIMATION_DURATION = 200;\n\nconst getAnimationProgress = animation => (\n  new Date().getTime() - animation.startTime) / ANIMATION_DURATION;\n\nexport const getAnimations = (\n  prevColumns,\n  nextColumns,\n  tableWidth,\n  prevAnimations,\n) => {\n  const resizing = prevColumns.map(column => column.key).join()\n    === nextColumns.map(column => column.key).join();\n\n  const prevColumnGeometries = new Map(getTableColumnGeometries(prevColumns, tableWidth)\n    .map((geometry, index) => [prevColumns[index].key, geometry])\n    .map(([key, geometry]) => {\n      const animation = prevAnimations.get(key);\n      if (!animation) return [key, geometry];\n      const progress = easeOutCubic(getAnimationProgress(animation));\n      const left = ((animation.left.to - animation.left.from) * progress) + animation.left.from;\n      return [key, {\n        left,\n        right: geometry.right - (geometry.left - left),\n      }];\n    }));\n\n  const nextColumnGeometries = new Map(getTableColumnGeometries(nextColumns, tableWidth)\n    .map((geometry, index) => [nextColumns[index].key, geometry]));\n\n  return new Map([...nextColumnGeometries.keys()]\n    .map((key) => {\n      const prev = prevColumnGeometries.get(key);\n      const next = nextColumnGeometries.get(key);\n\n      const result = { startTime: new Date().getTime(), style: {} };\n      const takePrevColumnIntoAccount = !!prevAnimations.get(key) || (prev && !resizing);\n      if (Math.abs((takePrevColumnIntoAccount ? prev.left : next.left) - next.left) > 1) {\n        result.left = { from: prev.left, to: next.left };\n      }\n      return [key, result];\n    })\n    .filter(animation => animation[1].left));\n};\n\nexport const filterActiveAnimations = animations => new Map([...animations.entries()]\n  .filter(([, animation]) => getAnimationProgress(animation) < 1));\n\nexport const evalAnimations = animations => new Map([...animations.entries()]\n  .map(([key, animation]) => {\n    const progress = easeOutCubic(getAnimationProgress(animation));\n    const result = { ...animation.style };\n    if (animation.left) {\n      const offset = (animation.left.to - animation.left.from) * (progress - 1);\n      result.transform = `translateX(${offset}px)`;\n    }\n    return [key, result];\n  }));\n","import { getTargetColumnGeometries } from './column-geometries';\n\nconst isOnTheSameLine = (geometry, y) => y >= geometry.top && y <= geometry.bottom;\n\nconst rectToObject = ({\n  top, right, bottom, left,\n}) => ({\n  top, right, bottom, left,\n});\n\nconst collapseGapsBetweenItems = geometries => geometries.map((geometry, index) => {\n  if (index !== geometries.length - 1 && geometry.top === geometries[index + 1].top) {\n    return {\n      ...geometry,\n      right: geometries[index + 1].left,\n    };\n  }\n  return geometry;\n});\n\nexport const getGroupCellTargetIndex = (geometries, sourceIndex, { x, y }) => {\n  if (geometries.length === 0) return 0;\n\n  const targetGeometries = sourceIndex !== -1\n    ? getTargetColumnGeometries(geometries, sourceIndex)\n    : geometries.map(rectToObject);\n\n  const targetIndex = collapseGapsBetweenItems(targetGeometries)\n    .findIndex((geometry, index) => {\n      const inVerticalBounds = isOnTheSameLine(geometry, y);\n      const inHorizontalBounds = x >= geometry.left && x <= geometry.right;\n      const shouldGoFirst = index === 0 && x < geometry.left;\n      const shouldGoOnLineBreak = !inVerticalBounds\n        && !!geometries[index - 1]\n        && isOnTheSameLine(geometries[index - 1], y);\n\n      return (inVerticalBounds && inHorizontalBounds)\n        || shouldGoFirst\n        || shouldGoOnLineBreak;\n    });\n\n  return targetIndex === -1 ? geometries.length : targetIndex;\n};\n","export const TABLE_STUB_TYPE = Symbol('stub');\n\nexport const getVisibleBoundaryWithFixed = (\n  visibleBoundary, items,\n) => items.reduce((acc, item, index) => {\n  if (item.fixed && (index < visibleBoundary[0] || index > visibleBoundary[1])) {\n    acc.push([index, index]);\n  }\n  return acc;\n}, [visibleBoundary]);\n\nexport const getVisibleBoundary = (items, viewportStart, viewportSize, getItemSize, overscan) => {\n  let start = null;\n  let end = null;\n\n  const viewportEnd = viewportStart + viewportSize;\n  let index = 0;\n  let beforePosition = 0;\n  while (end === null && index < items.length) {\n    const item = items[index];\n    const afterPosition = beforePosition + getItemSize(item);\n    const isVisible = (beforePosition >= viewportStart && beforePosition < viewportEnd)\n      || (afterPosition > viewportStart && afterPosition <= viewportEnd)\n      || (beforePosition < viewportStart && afterPosition > viewportEnd);\n    if (isVisible && start === null) {\n      start = index;\n    }\n    if (!isVisible && start !== null) {\n      end = index - 1;\n      break;\n    }\n    index += 1;\n    beforePosition = afterPosition;\n  }\n  if (start !== null && end === null) {\n    end = index - 1;\n  }\n\n  start = start === null ? 0 : start;\n  end = end === null ? 0 : end;\n\n  if (overscan) {\n    start = Math.max(0, start - overscan);\n    end = Math.min(items.length - 1, end + overscan);\n  }\n\n  return [start, end];\n};\n\nexport const getSpanBoundary = (items, visibleBoundaries, getItemSpan) => visibleBoundaries\n  .map((visibleBoundary) => {\n    let [start, end] = visibleBoundary;\n\n    for (let index = 0; index <= visibleBoundary[1]; index += 1) {\n      const span = getItemSpan(items[index]);\n      if (index < visibleBoundary[0] && index + span > visibleBoundary[0]) {\n        start = index;\n      }\n      if (index + (span - 1) > visibleBoundary[1]) {\n        end = index + (span - 1);\n      }\n    }\n    return [start, end];\n  });\n\nexport const collapseBoundaries = (itemsCount, visibleBoundaries, spanBoundaries) => {\n  const boundaries = [];\n\n  const visiblePoints = visibleBoundaries.reduce((acc, boundary) => {\n    for (let point = boundary[0]; point <= boundary[1]; point += 1) {\n      acc.push(point);\n    }\n    return acc;\n  }, []);\n\n  const spanStartPoints = new Set();\n  const spanEndPoints = new Set();\n  spanBoundaries.forEach(rowBoundaries => rowBoundaries\n    .forEach((boundary) => {\n      spanStartPoints.add(boundary[0]);\n      spanEndPoints.add(boundary[1]);\n    }));\n\n  let lastPoint;\n  for (let index = 0; index < itemsCount; index += 1) {\n    if (visiblePoints.indexOf(index) !== -1) {\n      if (lastPoint !== undefined) {\n        boundaries.push([lastPoint, index - 1]);\n        lastPoint = undefined;\n      }\n      boundaries.push([index, index]);\n    } else if (spanStartPoints.has(index)) {\n      if (index > 0) {\n        boundaries.push([\n          lastPoint !== undefined ? lastPoint : index,\n          index - 1,\n        ]);\n      }\n      lastPoint = index;\n    } else if (spanEndPoints.has(index)) {\n      boundaries.push([\n        lastPoint !== undefined ? lastPoint : index,\n        index,\n      ]);\n      lastPoint = undefined;\n    } else if (lastPoint === undefined) {\n      lastPoint = index;\n    }\n  }\n\n  if (lastPoint !== undefined) {\n    boundaries.push([lastPoint, itemsCount - 1]);\n  }\n\n  return boundaries;\n};\n\nconst getColumnsSize = (columns, startIndex, endIndex, getColumnSize) => {\n  let size = 0;\n  let index;\n  const loopEndIndex = endIndex + 1;\n  for (index = startIndex; index < loopEndIndex; index += 1) {\n    size += getColumnSize(columns[index], 0);\n  }\n  return size;\n};\n\nexport const getCollapsedColumns = (columns, visibleBoundaries, boundaries, getColumnWidth) => {\n  const collapsedColumns = [];\n  boundaries.forEach((boundary) => {\n    const isVisible = visibleBoundaries.reduce((acc, visibleBoundary) => (\n      acc || (visibleBoundary[0] <= boundary[0] && boundary[1] <= visibleBoundary[1])\n    ), false);\n\n    if (isVisible) {\n      const column = columns[boundary[0]];\n      collapsedColumns.push({\n        ...column,\n        width: getColumnWidth(column, 0),\n      });\n    } else {\n      collapsedColumns.push({\n        key: `${TABLE_STUB_TYPE.toString()}_${boundary[0]}_${boundary[1]}`,\n        type: TABLE_STUB_TYPE,\n        width: getColumnsSize(columns, boundary[0], boundary[1], getColumnWidth),\n      });\n    }\n  });\n  return collapsedColumns;\n};\n\nexport const getCollapsedRows = (rows, visibleBoundary, boundaries, getRowHeight, getCells) => {\n  const collapsedColumns = [];\n  boundaries.forEach((boundary) => {\n    const isVisible = visibleBoundary[0] <= boundary[0] && boundary[1] <= visibleBoundary[1];\n    if (isVisible) {\n      const row = rows[boundary[0]];\n      collapsedColumns.push({\n        row,\n        cells: getCells(row),\n      });\n    } else {\n      collapsedColumns.push({\n        row: {\n          key: `${TABLE_STUB_TYPE.toString()}_${boundary[0]}_${boundary[1]}`,\n          type: TABLE_STUB_TYPE,\n          height: getColumnsSize(rows, boundary[0], boundary[1], getRowHeight),\n        },\n      });\n    }\n  });\n  return collapsedColumns;\n};\n\nexport const getCollapsedCells = (columns, spanBoundaries, boundaries, getColSpan) => {\n  const collapsedColumns = [];\n  let index = 0;\n  while (index < boundaries.length) {\n    const boundary = boundaries[index];\n    const isSpan = spanBoundaries.reduce((acc, spanBoundary) => (\n      acc || (spanBoundary[0] <= boundary[0] && boundary[1] <= spanBoundary[1])), false);\n    if (isSpan) {\n      const column = columns[boundary[0]];\n      const realColSpan = getColSpan(column);\n      const realColSpanEnd = (realColSpan + boundary[0]) - 1;\n      const colSpanEnd = boundaries.findIndex(\n        colSpanBoundary => colSpanBoundary[0]\n        <= realColSpanEnd && realColSpanEnd\n        <= colSpanBoundary[1],\n      );\n      collapsedColumns.push({\n        column,\n        colSpan: (colSpanEnd - index) + 1,\n      });\n      index += 1;\n    } else {\n      collapsedColumns.push({\n        column: {\n          key: `${TABLE_STUB_TYPE.toString()}_${boundary[0]}_${boundary[1]}`,\n          type: TABLE_STUB_TYPE,\n        },\n        colSpan: 1,\n      });\n      index += 1;\n    }\n  }\n  return collapsedColumns;\n};\n\nexport const getCollapsedGrid = ({\n  rows,\n  columns,\n  top,\n  height,\n  left,\n  width,\n  getColumnWidth = column => column.width,\n  getRowHeight = row => row.height,\n  getColSpan = () => 1,\n}) => {\n  if (!rows.length || !columns.length) {\n    return {\n      columns: [],\n      rows: [],\n    };\n  }\n  const rowsVisibleBoundary = getVisibleBoundary(rows, top, height, getRowHeight, 3);\n  const columnsVisibleBoundary = getVisibleBoundaryWithFixed(\n    getVisibleBoundary(columns, left, width, getColumnWidth, 1),\n    columns,\n  );\n\n  const rowSpanBoundaries = rows\n    .slice(rowsVisibleBoundary[0], rowsVisibleBoundary[1])\n    .map(row => getSpanBoundary(\n      columns,\n      columnsVisibleBoundary,\n      column => getColSpan(row, column),\n    ));\n  const columnBoundaries = collapseBoundaries(\n    columns.length,\n    columnsVisibleBoundary,\n    rowSpanBoundaries,\n  );\n\n  const rowBoundaries = collapseBoundaries(rows.length, [rowsVisibleBoundary], []);\n\n  return {\n    columns: getCollapsedColumns(\n      columns,\n      columnsVisibleBoundary,\n      columnBoundaries,\n      getColumnWidth,\n    ),\n    rows: getCollapsedRows(\n      rows,\n      rowsVisibleBoundary,\n      rowBoundaries,\n      getRowHeight,\n      row => getCollapsedCells(\n        columns,\n        getSpanBoundary(\n          columns,\n          columnsVisibleBoundary,\n          column => getColSpan(row, column),\n        ),\n        columnBoundaries,\n        column => getColSpan(row, column),\n      ),\n    ),\n  };\n};\n"],"names":["rowIdGetter","getRowId","rows","map","Map","row","rowIndex","get","defaultGetCellValue","columnName","cellValueGetter","getCellValue","columns","useFastAccessor","reduce","acc","column","name","changeColumnSorting","state","direction","keepOther","sortIndex","sorting","nextSorting","slice","Array","isArray","filter","columnSorting","indexOf","columnSortingIndex","findIndex","newColumnSorting","splice","newIndexFallback","length","newIndex","undefined","unique","arr","Set","getColumnSortingDirection","s","getPersistentSortedColumns","columnExtensions","sortingEnabled","sortItem","push","calculateKeepOther","persistentSortedColumns","item","merge","array","auxiliary","lo","mid","hi","compare","i","j","k","cmp","sortArrayToAuxiliary","Math","floor","sortAuxiliaryToArray","a","b","result","NODE_CHECK","Symbol","rowsToTree","getRowLevelKey","levels","children","forEach","levelKey","levelIndex","level","root","node","treeToRows","tree","defaultCompare","createCompare","getColumnCompare","getComparableValue","reverse","prevCompare","inverse","columnCompare","aRow","bRow","sortTree","sortedTree","mergeSort","sortHierarchicalRows","sortedRows","isGroupRow","groupedBy","value","changeColumnFilter","filters","config","filterIndex","f","nextState","getColumnFilterConfig","filterExpression","expression","selfFilterExpr","operator","operators","or","predicates","predicate","and","toLowerCase","String","operationPredicates","contains","notContains","startsWith","endsWith","equal","notEqual","greaterThan","greaterThanOrEqual","lessThan","lessThanOrEqual","defaultFilterPredicate","operation","filterTree","filteredChildren","filterHierarchicalRows","getCollapsedRows","collapsedRowsMeta","filteredTree","isNode","collapsedRows","filteredCollapsedRows","buildPredicate","initialFilterExpression","getColumnPredicate","getSimplePredicate","customPredicate","getOperatorPredicate","build","getPredicate","filteredRows","Object","keys","filteredCollapsedRowsGetter","unwrappedFilteredRows","GROUP_KEY_SEPARATOR","applyColumnGrouping","grouping","groupIndex","nextGrouping","groupingIndex","g","targetIndex","changeColumnGrouping","expandedGroups","ungroupedColumnIndex","group","index","filteredExpandedGroups","split","toggleExpandedGroups","groupKey","groupKeyIndex","draftColumnGrouping","draftGrouping","cancelColumnGroupingDraft","adjustSortIndex","max","columnGrouping","GRID_GROUP_TYPE","GRID_GROUP_CHECK","toString","GRID_GROUP_LEVEL_KEY","GRID_GROUP_COLLAPSED_ROWS","groupRowChecker","groupRowLevelKeyGetter","defaultColumnCriteria","key","groupedRows","getColumnCriteria","keyPrefix","groupCriteria","groups","sameKeyItems","set","nestedGrouping","values","items","compoundKey","expandedGroupRows","groupingColumnNames","expandedGroupsSet","currentGroupExpanded","currentGroupLevel","groupLevel","has","groupCollapsedRowsGetter","customGroupedRows","currentRows","getChildGroups","rootRows","childRows","customGroupingRowIdGetter","firstRow","find","groupingPanelItems","c","draft","some","setCurrentPage","prevPage","page","setPageSize","prevPageSize","size","clamp","min","PAGE_HEADERS_OVERFLOW_ERROR","paginatedRows","pageSize","rowsWithPageHeaders","headerRows","currentIndex","headerIndex","headerRow","Error","indexInPage","rowCount","pageCount","count","ceil","currentPage","totalCount","totalPages","adjustedCurrentPage","setTimeout","firstRowOnPage","lastRowOnPage","totalRowCount","calculateStartPage","maxButtonCount","totalPageCount","toggle","source","itemsSet","sourceState","availableSelection","sourceSet","toggleSelection","selection","rowIds","rowsWithAvailableToSelect","dataRows","availableToSelect","someSelected","selectionSet","elem","allSelected","unwrapSelectedRows","startEditRows","prevEditingRowIds","stopEditRows","rowIdSet","id","addRow","addedRows","changeAddedRow","rowId","change","cancelAddedRows","indexSet","changeRow","prevRowChanges","prevChange","cancelChanges","deleteRows","deletedRowIds","cancelDeletedRows","changedRowsByIds","changes","addedRowsByIds","defaultCreateRowChange","createRowChangeGetter","createRowChange","columnExtension","getRowChange","rowChanges","TABLE_REORDERING_TYPE","changeColumnOrder","order","sourceColumnName","targetColumnName","sourceColumnIndex","targetColumnIndex","newOrder","TABLE_DATA_TYPE","TABLE_NODATA_TYPE","TABLE_FLEX_TYPE","orderedColumns","tableColumns","type","aPos","bPos","tableHeaderRowsWithReordering","tableHeaderRows","height","draftOrder","sourceColumn","UNSET_COLUMN_WIDTH_ERROR","join","specifyWidths","widths","onAbsence","tableColumn","el","width","tableColumnsWithWidths","columnWidths","replace","tableColumnsWithDraftWidths","draftColumnWidths","changeTableColumnWidth","shift","minColumnWidth","nextColumnWidth","updatedColumn","draftTableColumnWidth","cancelTableColumnWidthDraft","TABLE_EDIT_COMMAND_TYPE","TABLE_ADDED_TYPE","TABLE_EDIT_TYPE","TABLE_HEADING_TYPE","isHeadingEditCommandsTableCell","tableRow","isEditCommandsTableCell","tableColumnsWithEditing","isEditTableCell","isAddedTableRow","isEditTableRow","tableRowsWithEditing","tableRows","editingRowIds","rowHeight","editedTableRows","addedTableRows","TABLE_FILTER_TYPE","DEFAULT_FILTER_OPERATIONS","isFilterTableCell","isFilterTableRow","getColumnFilterOperations","getAvailableFilterOperations","isFilterValueEmpty","getSelectedFilterOperation","filterOperations","columnFilter","columnFilterOperations","tableHeaderRowsWithFilter","TABLE_GROUP_TYPE","isGroupTableCell","isGroupIndentTableCell","rowGroupIndex","columnGroupIndex","isGroupTableRow","tableColumnsWithDraftGrouping","showColumnWhenGrouped","columnGroupingExists","columnDraftGroupingExists","tableColumnsWithGrouping","indentColumnWidth","groupedColumn","tableRowsWithGrouping","tableGroupCellColSpanGetter","getTableCellColSpan","params","isHeadingTableCell","isHeadingTableRow","tableRowsWithHeading","TABLE_BAND_TYPE","BAND_GROUP_CELL","BAND_HEADER_CELL","BAND_EMPTY_CELL","BAND_DUPLICATE_RENDER","isBandedTableRow","isBandedOrHeaderRow","isNoDataColumn","columnType","getColumnMeta","bands","tableRowLevel","title","getColSpan","currentColumnIndex","columnBands","currentRowLevel","currentColumnTitle","isCurrentColumnFixed","isOneChain","columnMeta","fixed","getBandComponent","currentTableColumn","rowSpan","payload","maxLevel","currentColumnMeta","previousTableColumn","beforeBorder","isPrevColumnFixed","prevColumnMeta","colSpan","tableRowsWithBands","tableDataColumns","getMaxNestedLevel","isDataColumn","dataColumn","tableBandHeaders","from","toggleDetailRowExpanded","prevExpanded","TABLE_DETAIL_TYPE","isDetailRowExpanded","expandedDetailRowIds","isDetailToggleTableCell","isDetailTableRow","isDetailTableCell","tableRowsWithExpandedDetail","expandedRowId","insertIndex","tableColumnsWithDetail","toggleColumnWidth","tableDetailCellColSpanGetter","TABLE_SELECT_TYPE","isSelectTableCell","isSelectAllTableCell","tableColumnsWithSelection","selectionColumnWidth","isDataTableCell","isHeaderStubTableCell","isDataTableRow","isNoDataTableRow","isNoDataTableCell","getColumnExtension","extension","getColumnExtensionValueGetter","extensionName","defaultValue","extensionValue","tableColumnsWithDataRows","align","wordWrapEnabled","tableRowsWithDataRows","tableCellColSpanGetter","visibleTableColumns","hiddenColumnNames","tableDataColumnsExist","columnChooserItems","hidden","toggleColumn","hiddenColumn","toggleRowExpanded","GRID_TREE_NODE_TYPE","customTreeRows","currentRow","getChildRows","treeMeta","empty","nestedResult","leaf","customTreeRowsWithMeta","customTreeRowIdGetter","firstNestedRowIndex","customTreeRowLevelKeyGetter","rowMeta","expandedTreeRows","expandedRowIds","expandedRowIdsSet","currentExpanded","currentLevel","lastRow","collapsedItems","collapsedTreeRowsGetter","isTreeRowLeafGetter","getTreeRowLevelGetter","unwrappedCustomTreeRows","isTreeTableCell","forColumnName","changeSearchValue","prevSearchValue","searchValue","searchFilterExpression","selfFilterExpression","getAvailableFilterOperationsGetter","availableFilterOperations","columnNames","FIXED_COLUMN_LEFT_SIDE","FIXED_COLUMN_RIGHT_SIDE","TABLE_FIXED_TYPE","getFixedColumnKeys","fixedNames","isFixedTableRow","calculatePosition","tableColumnDimensions","target","calculateFixedColumnProps","leftColumns","rightColumns","side","targetArray","fixedIndex","isBoundary","fixedSide","isStandAlone","neighborTableColumn","showRightDivider","showLeftDivider","position","tableColumnsWithFixed","tableHeaderRowsWithFixed","defaultSummaryCalculators","sum","getValue","Infinity","avg","defaultSummaryCalculator","summaryCalculator","rowsSummary","summaryItems","calculator","totalSummaryValues","plainRows","groupSummaryValues","summaries","treeSummaryValues","TABLE_TOTAL_SUMMARY_TYPE","TABLE_GROUP_SUMMARY_TYPE","TABLE_TREE_SUMMARY_TYPE","tableRowsWithTotalSummaries","footerRows","tableRowsWithSummaries","closeLevel","opened","isTotalSummaryTableCell","isGroupSummaryTableCell","isTreeSummaryTableCell","isTotalSummaryTableRow","isGroupSummaryTableRow","isTreeSummaryTableRow","getColumnSummaries","summaryValues","getTargetColumnGeometries","columnGeometries","sourceIndex","sourceWidth","right","left","getWidthDifference","top","bottom","leftBorder","rightBorder","getTableColumnGeometries","tableWidth","freeSpace","restrictedSpace","accum","freeSpacePortions","freeSpacePortion","lastRightPosition","getTableTargetColumnIndex","offset","ANIMATION_DURATION","getAnimationProgress","animation","Date","getTime","startTime","getAnimations","prevColumns","nextColumns","prevAnimations","resizing","prevColumnGeometries","geometry","progress","easeOutCubic","to","nextColumnGeometries","prev","next","style","takePrevColumnIntoAccount","abs","filterActiveAnimations","animations","entries","evalAnimations","transform","isOnTheSameLine","y","rectToObject","collapseGapsBetweenItems","geometries","getGroupCellTargetIndex","x","targetGeometries","inVerticalBounds","inHorizontalBounds","shouldGoFirst","shouldGoOnLineBreak","TABLE_STUB_TYPE","getVisibleBoundaryWithFixed","visibleBoundary","getVisibleBoundary","viewportStart","viewportSize","getItemSize","overscan","start","end","viewportEnd","beforePosition","afterPosition","isVisible","getSpanBoundary","visibleBoundaries","getItemSpan","span","collapseBoundaries","itemsCount","spanBoundaries","boundaries","visiblePoints","boundary","point","spanStartPoints","spanEndPoints","rowBoundaries","add","lastPoint","getColumnsSize","startIndex","endIndex","getColumnSize","loopEndIndex","getCollapsedColumns","getColumnWidth","collapsedColumns","getRowHeight","getCells","cells","getCollapsedCells","isSpan","spanBoundary","realColSpan","realColSpanEnd","colSpanEnd","colSpanBoundary","getCollapsedGrid","rowsVisibleBoundary","columnsVisibleBoundary","rowSpanBoundaries","columnBoundaries"],"mappings":"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"}